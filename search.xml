<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Fabricjs 画六边形</title>
    <url>/2019/04/26/Fabricjs-%E7%94%BB%E5%85%AD%E8%BE%B9%E5%BD%A2/</url>
    <content><![CDATA[<p>fabricjs，就是一个前端画板，canvas的增强版。</p>
<p>使用fabricjs来画六边形和canvas画其实原理是一样的，只是方法不同。</p>
<ol>
<li>设定变量： <ul>
<li><code>start</code> 鼠标按下，开始的事件对象</li>
<li><code>upObj</code> 在鼠标没有松开的情况下上一次绘画的对象</li>
</ul>
</li>
<li><p>绑定画板事件<code>mouse:down</code>设置开始事件</p>
<figure class="highlight javascript"><figcaption><span>1.6</span></figcaption><table><tr><td class="code"><pre><span class="line">canvas.on(<span class="string">"mouse:down"</span>, o =&gt; (start = o.e));</span><br></pre></td></tr></table></figure>
</li>
<li><p>绑定画板事件<code>mouse:up</code>绘画结束，清空开始事件对象，并清空上一次绘画对象</p>
<figure class="highlight javascript"><figcaption><span>1.6</span></figcaption><table><tr><td class="code"><pre><span class="line">canvas.on(<span class="string">"mouse:up"</span>, o =&gt; &#123;</span><br><span class="line">  start = <span class="literal">null</span>;</span><br><span class="line">  upObj = <span class="literal">null</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>绑定画板事件<code>mouse:move</code>绘画，也可以在<code>mouse:up</code>时绘画，但这样体验效果不好</p>
<figure class="highlight javascript"><figcaption><span>1.6</span></figcaption><table><tr><td class="code"><pre><span class="line">canvas.on(<span class="string">"mouse:move"</span>, o =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!start) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (upObj) &#123;</span><br><span class="line">    canvas.remove(upObj);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">offsetX</span>: sx, <span class="attr">offsetY</span>: sy &#125; = start;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">e</span>: &#123; <span class="attr">offsetX</span>: ex, <span class="attr">offsetY</span>: ey &#125; &#125; = o;</span><br><span class="line">  <span class="comment">// 计算半径，边长</span></span><br><span class="line">  <span class="keyword">const</span> R = <span class="built_in">Math</span>.sqrt((ex - sx) * (ex - sx) + (ey - sy) * (ey - sy)) / <span class="number">2</span>;</span><br><span class="line">  <span class="comment">// 6条边的坐标点（60是六边形的内角度数）</span></span><br><span class="line">  <span class="keyword">const</span> points = <span class="built_in">Array</span>.from(&#123; <span class="attr">length</span>: <span class="number">6</span> &#125;).map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      x: <span class="built_in">Math</span>.cos(<span class="number">60</span> * index / <span class="number">180</span> * <span class="built_in">Math</span>.PI) * R,</span><br><span class="line">      y: <span class="built_in">Math</span>.sin(<span class="number">60</span> * index / <span class="number">180</span> * <span class="built_in">Math</span>.PI) * R</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">  upObj = <span class="keyword">new</span> fabric.Polygon(points, &#123;</span><br><span class="line">    top: sy,</span><br><span class="line">    left: sx,</span><br><span class="line">    stroke: <span class="string">"red"</span>,</span><br><span class="line">    fill: <span class="string">"rgba(255,255,255,0)"</span></span><br><span class="line">  &#125;);</span><br><span class="line">  canvas.add(upObj);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<iframe id="cp_embed_VNqqEL" src="//codepen.io/zhouxianjun/embed/VNqqEL?height=600&theme-id=0&slug-hash=VNqqEL&default-tab=[js,result]&embed-version=2" scrolling="no" frameborder="no" height="600" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 800px; overflow: hidden;"></iframe>
]]></content>
      <categories>
        <category>前端</category>
        <category>fabric</category>
      </categories>
      <tags>
        <tag>fabric</tag>
        <tag>js</tag>
        <tag>六边形</tag>
      </tags>
  </entry>
  <entry>
    <title>iView Table 表格合并</title>
    <url>/2019/04/28/iView-Table-%E8%A1%A8%E6%A0%BC%E5%90%88%E5%B9%B6/</url>
    <content><![CDATA[<p>在项目开发中，总是有些地方需要把单元格合并的，比如订单列表：同一个订单号，不同的产品，则需要合并订单号等。<br>但是官方目前只支持表头的合并，还未支持单元格的合并，有人在Github上提了<a href="https://github.com/iview/iview/issues/2751" target="_blank" rel="noopener">Issues</a>,<br>但是官方一直没有解决，so。。。我就自己写了，一个方法，思路是：</p>
<ol>
<li>获取到Vue中iView到Table实例；</li>
<li><p>获取当前所有行数据（class为<code>ivu-table-row</code>）;</p>
<figure class="highlight javascript"><figcaption><span>1.6</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> rows = table?.$refs?.tbody?.$el?.getElementsByClassName(<span class="string">'ivu-table-row'</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>循环每条数据，判断当前行数据的相邻数据是否相等，例如：[{id: 1}, {id: 1}]则代表第一行和第二行的id值为相邻数据，反之：[{id: 1},{id: 2},{id: 3}]则不算相邻数据。</p>
<figure class="highlight javascript"><figcaption><span>1.6</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 最后一个相邻数据的下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>data 数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>value 值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>field 字段</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>index 当前数据下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;number&#125;</span> </span>下标</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> lastAdjacentIndex = <span class="function">(<span class="params">data, value, field, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> last = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 取出大于当前下标的所有数据</span></span><br><span class="line">    <span class="keyword">const</span> slice = data.slice(index);</span><br><span class="line">    <span class="comment">// 循环每个数据判断是否相等</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; slice.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (slice[i][field] === value) &#123;</span><br><span class="line">            last = index + i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 只要有一个不相等则直接返回</span></span><br><span class="line">            <span class="keyword">return</span> last;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> last;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>把相邻数据的下面所有行的当前列删除。</p>
<figure class="highlight javascript"><figcaption><span>1.6</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// colSpanItem为已经删除列的行数据：key为行下标，值为列下标+1</span></span><br><span class="line"><span class="keyword">const</span> lastIndex = lastAdjacentIndex(data, item[field], field, index);</span><br><span class="line"><span class="keyword">const</span> rowSpan = lastIndex - index + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (rowSpan &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; rowSpan; i++) &#123;</span><br><span class="line">        rows[index + i].querySelector(<span class="string">`td:nth-of-type(<span class="subst">$&#123;colIndex + <span class="number">1</span> - (colSpanItem[index + i] || <span class="number">0</span>)&#125;</span>)`</span>).remove();</span><br><span class="line">      colSpanItem[index + i] = colIndex + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后对当前行的当前列设置rowspan属性，有几个相邻数据就为几。</p>
<figure class="highlight javascript"><figcaption><span>1.6</span></figcaption><table><tr><td class="code"><pre><span class="line">rows[index].querySelector(<span class="string">`td:nth-of-type(<span class="subst">$&#123;colIndex + <span class="number">1</span> - (colSpanItem[index] || <span class="number">0</span>)&#125;</span>)`</span>).setAttribute(<span class="string">'rowspan'</span>, rowSpan);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>为了大家使用方便，我已经打包到<code>npm</code>，可以直接使用: <a href="https://www.npmjs.com/package/ivu-table-merge" target="_blank" rel="noopener">ivu-table-merge</a></p>
</blockquote>
<p>具体请看下面的例子：</p>
<iframe id="cp_embed_pBqmVm" src="//codepen.io/zhouxianjun/embed/pBqmVm?height=330&theme-id=0&slug-hash=pBqmVm&default-tab=[js,result]&embed-version=2" scrolling="no" frameborder="no" height="330" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe>
]]></content>
      <categories>
        <category>前端</category>
        <category>iView</category>
      </categories>
      <tags>
        <tag>iView</tag>
        <tag>table</tag>
        <tag>merge</tag>
        <tag>合并单元格</tag>
      </tags>
  </entry>
  <entry>
    <title>redisson 分布式锁</title>
    <url>/2019/04/29/redisson-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
    <content><![CDATA[<p>在很多场景中，我们为了保证数据的最终一致性，需要很多的技术方案来支持，比如分布式事务、分布式锁等。有的时候，我们需要保证一个方法在同一时间内只能被同一个线程执行。在单机环境中，Java中其实提供了很多并发处理相关的API，例如：<code>ReentrantLock</code>与<code>synchronized</code>等，<br>但是这些API在分布式场景中就无能为力了。也就是说单纯的Java API并不能提供分布式锁的能力。所以针对分布式锁的实现目前有多种方案。</p>
<p>下面我们主要说使用Redisson(Redis开源框架)<a href="https://github.com/redisson/redisson/wiki/8.-分布式锁和同步器" target="_blank" rel="noopener">分布式锁和同步器</a>做分布式锁，当然你也可以直接使用Redis操作，例如lua脚本，保证一致性。</p>
<h3 id="单锁"><a href="#单锁" class="headerlink" title="单锁"></a>单锁</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单个锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> times 等待时长(毫秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keys key 多个key自动以冒号连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> TimeoutException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RLock <span class="title">lock</span><span class="params">(<span class="keyword">long</span> times, String ...keys)</span> <span class="keyword">throws</span> TimeoutException </span>&#123;</span><br><span class="line">    <span class="comment">// 因为redis默认以冒号作为目录分隔（redis没有目录这一说）</span></span><br><span class="line">    String key = String.join(<span class="string">":"</span>, keys);</span><br><span class="line">    RLock rLock = redissonClient.getFairLock(key);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 设置锁住时间为等待时间的2倍</span></span><br><span class="line">        <span class="keyword">boolean</span> res = rLock.tryLock(times, times * <span class="number">2</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">        <span class="keyword">if</span> (!res) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TimeoutException(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException | TimeoutException e) &#123;</span><br><span class="line">        log.warn(<span class="string">"分布式锁:&#123;&#125; 超时"</span>, key, e);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> TimeoutException(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rLock;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="联锁"><a href="#联锁" class="headerlink" title="联锁"></a>联锁</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> RedissonMultiLock <span class="title">lock</span><span class="params">(<span class="keyword">long</span> times, Set&lt;String&gt; keys)</span> <span class="keyword">throws</span> TimeoutException </span>&#123;</span><br><span class="line">    RLock[] locks = keys.stream().map(key -&gt; redissonClient.getFairLock(key)).toArray(RLock[]::<span class="keyword">new</span>);</span><br><span class="line">    RedissonMultiLock lock = <span class="keyword">new</span> RedissonMultiLock(locks);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">boolean</span> res = lock.tryLock(times, times * <span class="number">2</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">        <span class="keyword">if</span> (!res) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TimeoutException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException | TimeoutException e) &#123;</span><br><span class="line">        log.warn(<span class="string">"分布式联锁:&#123;&#125; 超时"</span>, keys, e);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> TimeoutException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> lock;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alone.common.lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.redisson.RedissonMultiLock;</span><br><span class="line"><span class="keyword">import</span> org.redisson.api.RLock;</span><br><span class="line"><span class="keyword">import</span> org.redisson.api.RedissonClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhouxianjun(Alone)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/10/14 10:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistributedLock</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> TIMES = <span class="number">1000</span> * <span class="number">30</span>;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> times 等待时长(毫秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keys key 多个key自动以冒号连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> TimeoutException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RLock <span class="title">lock</span><span class="params">(<span class="keyword">long</span> times, String ...keys)</span> <span class="keyword">throws</span> TimeoutException </span>&#123;</span><br><span class="line">        String key = String.join(<span class="string">":"</span>, keys);</span><br><span class="line">        RLock rLock = redissonClient.getFairLock(key);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">boolean</span> res = rLock.tryLock(times, times * <span class="number">2</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">            <span class="keyword">if</span> (!res) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> TimeoutException(key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException | TimeoutException e) &#123;</span><br><span class="line">            log.warn(<span class="string">"分布式锁:&#123;&#125; 超时"</span>, key, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TimeoutException(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rLock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RLock <span class="title">lock</span><span class="params">(String ...keys)</span> <span class="keyword">throws</span> TimeoutException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lock(TIMES, keys);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedissonMultiLock <span class="title">lockAutoJoin</span><span class="params">(<span class="keyword">long</span> times, Set&lt;String[]&gt; keys)</span> <span class="keyword">throws</span> TimeoutException </span>&#123;</span><br><span class="line">        Set&lt;String&gt; kSet = keys.stream().map(strings -&gt; String.join(<span class="string">":"</span>, strings)).collect(Collectors.toSet());</span><br><span class="line">        <span class="keyword">return</span> lock(times, kSet);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedissonMultiLock <span class="title">lock</span><span class="params">(<span class="keyword">long</span> times, Set&lt;String&gt; keys)</span> <span class="keyword">throws</span> TimeoutException </span>&#123;</span><br><span class="line">        RLock[] locks = keys.stream().map(key -&gt; redissonClient.getFairLock(key)).toArray(RLock[]::<span class="keyword">new</span>);</span><br><span class="line">        RedissonMultiLock lock = <span class="keyword">new</span> RedissonMultiLock(locks);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">boolean</span> res = lock.tryLock(times, times * <span class="number">2</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">            <span class="keyword">if</span> (!res) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> TimeoutException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException | TimeoutException e) &#123;</span><br><span class="line">            log.warn(<span class="string">"分布式联锁:&#123;&#125; 超时"</span>, keys, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TimeoutException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedissonMultiLock <span class="title">lockAutoJoin</span><span class="params">(Set&lt;String[]&gt; keys)</span> <span class="keyword">throws</span> TimeoutException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lockAutoJoin(TIMES, keys);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedissonMultiLock <span class="title">lock</span><span class="params">(Set&lt;String&gt; keys)</span> <span class="keyword">throws</span> TimeoutException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lock(TIMES, keys);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>不管锁分布式锁还是Java API的各种锁，只要用了锁则会损耗一定的性能作为代价，所以要在需要的地方使用。</p>
</blockquote>
]]></content>
      <categories>
        <category>后端</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>redisson</tag>
        <tag>redis</tag>
        <tag>lock</tag>
        <tag>distributed</tag>
        <tag>分布式锁</tag>
      </tags>
  </entry>
  <entry>
    <title>vue history 多模块nginx配置</title>
    <url>/2020/07/07/vue-history-%E5%A4%9A%E6%A8%A1%E5%9D%97nginx%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>vue-router history模式比hash模式有很多好处，我在这里就不详细说了，主要有一点：<br>当我们用分享的时候，或者把url暴露给别人用的时候，很多时候会经过url编码就会导致hash的#符号被转码，然后导致整个路由错误。</p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>当我们使用history模式的时候一般是需要配置nginx的tryfiles的，如果在一个nginx 域名中使用了2个或者多个vue spa 的history模式则会<br>导致无法进入其他模块的页面，因为都会被tryfiles转到/的index.html页面。</p>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><h3 id="第一个模块为-其次都在第一个模块内"><a href="#第一个模块为-其次都在第一个模块内" class="headerlink" title="第一个模块为/其次都在第一个模块内"></a>第一个模块为<code>/</code>其次都在第一个模块内</h3><h4 id="第一个模块，首页模块"><a href="#第一个模块，首页模块" class="headerlink" title="第一个模块，首页模块"></a>第一个模块，首页模块</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    root   /usr/vue/project1/dist/;</span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">    try_files $uri $uri/ /index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="第二个模块"><a href="#第二个模块" class="headerlink" title="第二个模块"></a>第二个模块</h4><p>这里的project2其实是放在project1的dist里面的。当然也放在外面更好配置，这里要注意的是，只能用alias不能用root。而这里的try_files的root则为第一个模块的root。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location /project2 &#123;</span><br><span class="line">    try_files $uri $uri/ /project2/$uri /project2/index.html;</span><br><span class="line">    alias /usr/vue/project1/dist/project2/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里需要注意的是，当我们第二个或者第三个模块的进入点是在第一个里面的话则vue-router的base必须与其一致，例如：<br>第一个模块地址: <a href="https://www.alone.com/project1" target="_blank" rel="noopener">https://www.alone.com/project1</a><br>第二个模块地址: <a href="https://www.alone.com/project1/project2" target="_blank" rel="noopener">https://www.alone.com/project1/project2</a><br>那router的base为：/project1/project2 否则无法进入路由。</p>
<h3 id="不在第一个模块内"><a href="#不在第一个模块内" class="headerlink" title="不在第一个模块内"></a>不在第一个模块内</h3><h4 id="第一个模块"><a href="#第一个模块" class="headerlink" title="第一个模块"></a>第一个模块</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location /project1 &#123;</span><br><span class="line">    root   /usr/vue/;</span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">    try_files $uri $uri/ /project1/dist/index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>路由base配置为: /project1<br>访问地址: <a href="https://www.alone.com/project1" target="_blank" rel="noopener">https://www.alone.com/project1</a></p>
<h4 id="第N个模块"><a href="#第N个模块" class="headerlink" title="第N个模块"></a>第N个模块</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location /project2 &#123;</span><br><span class="line">    alias /usr/vue/project2/dist/;</span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">    try_files $uri $uri/ /project2/dist/index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>路由base配置为: /project2<br>访问地址: <a href="https://www.alone.com/project2" target="_blank" rel="noopener">https://www.alone.com/project2</a></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>history</tag>
        <tag>nginx</tag>
        <tag>vue router</tag>
      </tags>
  </entry>
  <entry>
    <title>vue prerender-spa-plugin 预渲染</title>
    <url>/2020/06/18/vue-prerender-spa-plugin-%E9%A2%84%E6%B8%B2%E6%9F%93/</url>
    <content><![CDATA[<p>在做VUE H5单页面轻应用的时候，如果不优化则进入页面会很长时间的白屏，有很多种优化，我们这里主要讲<code>prerender-spa-plugin</code>预渲染。</p>
<h2 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h2><p><a href="https://github.com/chrisvfritz/prerender-spa-plugin" target="_blank" rel="noopener">prerender-spa-plugin</a> 利用了 Puppeteer 的爬取页面的功能。 Puppeteer 是一个 Chrome官方出品的 headlessChromenode 库。它提供了一系列的 API, 可以在无 UI 的情况下调用 Chrome 的功能, 适用于爬虫、自动化处理等各种场景。它很强大，所以很简单就能将运行时的 HTML 打包到文件中。原理是在 Webpack 构建阶段的最后，在本地启动一个 Puppeteer 的服务，访问配置了预渲染的路由，然后将 Puppeteer 中渲染的页面输出到 HTML 文件中，并建立路由对应的目录。</p>
<p>例如路由：/demo/add 成品结构:</p>
<pre><code>dist
--demo
----add
------index.html
</code></pre><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D prerender-spa-plugin</span><br></pre></td></tr></table></figure>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在vue.config.js中配置webpack信息</p>
<ol>
<li><p>在顶部导入依赖</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> PrerenderSPAPlugin = <span class="built_in">require</span>(<span class="string">'prerender-spa-plugin'</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>在configureWebpack节点下配置，configureWebpack为function，你也可以用chainWebpack链式配置，也可以直接在webpack配置plugins节点。</p>
</li>
</ol>
<ul>
<li><p>configureWebpack为function</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">config.plugins.push(<span class="keyword">new</span> PrerenderSPAPlugin(&#123;</span><br><span class="line">    <span class="comment">// Required - The path to the webpack-outputted app to prerender.</span></span><br><span class="line">    staticDir: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">    <span class="comment">// Required - Routes to render.</span></span><br><span class="line">    routes: [<span class="string">'/demo/add'</span>]</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>
</li>
<li><p>chainWebpack链式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">config.plugin(<span class="string">'prerender'</span>).use(PrerenderSPAPlugin, [&#123;</span><br><span class="line">    <span class="comment">// Required - The path to the webpack-outputted app to prerender.</span></span><br><span class="line">    staticDir: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">    <span class="comment">// Required - Routes to render.</span></span><br><span class="line">    routes: [<span class="string">'/demo/add'</span>]</span><br><span class="line">&#125;]);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>build 就能看到效果了。会在dist目录生成与路由对应的静态文件index.html。并且在你挂载的div里面有当前路由的静态元素。</p>
<h2 id="上面说的是最简单的使用方式，在真正场景中会遇到很多问题，下面我列举几个，并给出方案。"><a href="#上面说的是最简单的使用方式，在真正场景中会遇到很多问题，下面我列举几个，并给出方案。" class="headerlink" title="上面说的是最简单的使用方式，在真正场景中会遇到很多问题，下面我列举几个，并给出方案。"></a>上面说的是最简单的使用方式，在真正场景中会遇到很多问题，下面我列举几个，并给出方案。</h2><h3 id="当publicPath不为-的时候例如-device-，需要在PrerenderSPAPlugin插件配置indexPath"><a href="#当publicPath不为-的时候例如-device-，需要在PrerenderSPAPlugin插件配置indexPath" class="headerlink" title="当publicPath不为/的时候例如:/device/，需要在PrerenderSPAPlugin插件配置indexPath"></a>当publicPath不为<code>/</code>的时候例如:<code>/device/</code>，需要在<code>PrerenderSPAPlugin</code>插件配置<code>indexPath</code></h3><p>参考issue <a href="https://github.com/chrisvfritz/prerender-spa-plugin/issues/344#issuecomment-619475952" target="_blank" rel="noopener">https://github.com/chrisvfritz/prerender-spa-plugin/issues/344#issuecomment-619475952</a><br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> PrerenderSPAPlugin(&#123;</span><br><span class="line">    <span class="comment">// Required - The path to the webpack-outputted app to prerender.</span></span><br><span class="line">    staticDir: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">    indexPath: path.resolve(__dirname, <span class="string">`./dist<span class="subst">$&#123;config.output.publicPath&#125;</span>index.html`</span>),</span><br><span class="line">    <span class="comment">// Required - Routes to render.</span></span><br><span class="line">    routes: [<span class="string">'/device/demo/add'</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>配置vue.config.js属性<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    publicPath: <span class="string">'/device/'</span>,</span><br><span class="line">    outputPath: <span class="string">'dist/device/'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">并且会打包到dist/device/目录。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 在预渲染的时候不初始化某些东西，例如：不想把`</span>vConsole<span class="string">`预渲染。</span></span><br><span class="line"><span class="string">配置 插件的render属性</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line"><span class="keyword">new</span> PrerenderSPAPlugin(&#123;</span><br><span class="line">    <span class="comment">// Required - The path to the webpack-outputted app to prerender.</span></span><br><span class="line">    staticDir: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">    indexPath: path.resolve(__dirname, <span class="string">`./dist<span class="subst">$&#123;config.output.publicPath&#125;</span>index.html`</span>),</span><br><span class="line">    <span class="comment">// Required - Routes to render.</span></span><br><span class="line">    routes: [<span class="string">'/device/demo/add'</span>],</span><br><span class="line">    renderer: <span class="keyword">new</span> Renderer(&#123;</span><br><span class="line">        injectProperty: <span class="string">'__PRERENDER_INJECTED__'</span>,</span><br><span class="line">        inject: <span class="string">'prerender'</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>然后在<code>vConsole</code>初始化的地方判断<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isPrerender = <span class="built_in">window</span>.__PRERENDER_INJECTED__ === <span class="string">'prerender'</span>;</span><br><span class="line"><span class="keyword">if</span> (!isPrerender) &#123;</span><br><span class="line">    <span class="comment">// 初始化vConsole</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="想在vue挂载后渲染"><a href="#想在vue挂载后渲染" class="headerlink" title="想在vue挂载后渲染"></a>想在vue挂载后渲染</h3><p>配置 插件的render属性<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> PrerenderSPAPlugin(&#123;</span><br><span class="line">    <span class="comment">// Required - The path to the webpack-outputted app to prerender.</span></span><br><span class="line">    staticDir: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">    indexPath: path.resolve(__dirname, <span class="string">`./dist<span class="subst">$&#123;config.output.publicPath&#125;</span>index.html`</span>),</span><br><span class="line">    <span class="comment">// Required - Routes to render.</span></span><br><span class="line">    routes: [<span class="string">'/device/demo/add'</span>],</span><br><span class="line">    renderer: <span class="keyword">new</span> Renderer(&#123;</span><br><span class="line">        renderAfterDocumentEvent: <span class="string">'render-event'</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>在你挂载的mounted钩子触发<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mounted () &#123;</span><br><span class="line">    <span class="built_in">document</span>.dispatchEvent(<span class="keyword">new</span> Event(<span class="string">'render-event'</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="极致预渲染，就是让script资源不影响浏览器渲染"><a href="#极致预渲染，就是让script资源不影响浏览器渲染" class="headerlink" title="极致预渲染，就是让script资源不影响浏览器渲染"></a>极致预渲染，就是让script资源不影响浏览器渲染</h3><blockquote>
<p>先渲染完元素，再按顺序加载js资源 <a href="https://github.com/youzan/tiny-loader.js" target="_blank" rel="noopener">tiny-loader</a></p>
</blockquote>
<p>安装 jsdom 工具<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D cheerio</span><br></pre></td></tr></table></figure></p>
<p>在 PrerenderSPAPlugin 插件配置postProcess钩子<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">config.plugins.push(<span class="keyword">new</span> PrerenderSPAPlugin(&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    postProcess (renderedRoute) &#123;</span><br><span class="line">        <span class="keyword">const</span> $ = cheerio.load(renderedRoute.html);</span><br><span class="line">        <span class="keyword">const</span> jsSet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">        <span class="comment">// 先把页面的script脚本地址提取并用set去重</span></span><br><span class="line">        $(<span class="string">'script'</span>).each(<span class="function">(<span class="params">index, s</span>) =&gt;</span> jsSet.add(s.attribs.src));</span><br><span class="line">        <span class="comment">// 过滤null</span></span><br><span class="line">        <span class="keyword">const</span> jsPaths = [ ...jsSet ].filter(<span class="function"><span class="params">s</span> =&gt;</span> !!s);</span><br><span class="line">        <span class="keyword">const</span> js = <span class="string">`</span></span><br><span class="line"><span class="string">            Loader.sync(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(jsPaths)&#125;</span>);</span></span><br><span class="line"><span class="string">        `</span>;</span><br><span class="line">        <span class="comment">// 删除script标签</span></span><br><span class="line">        $(<span class="string">'script'</span>).remove();</span><br><span class="line">        <span class="comment">// 把js植入页面</span></span><br><span class="line">        $(<span class="string">`&lt;script type="text/javascript"&gt;<span class="subst">$&#123;js&#125;</span>&lt;/script&gt;`</span>).insertAfter(<span class="string">'body'</span>);</span><br><span class="line">        <span class="comment">// 把tiny-loader.js植入页面</span></span><br><span class="line">        $(<span class="string">`&lt;script src="<span class="subst">$&#123;config.output.publicPath&#125;</span>tiny-loader.js" type="text/javascript"&gt;&lt;/script&gt;`</span>).insertAfter(<span class="string">'body'</span>);</span><br><span class="line">        renderedRoute.html = $.html();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> renderedRoute;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></p>
<h3 id="kubernetes-ingress-nginx-容器路由，导致丢失publicPath"><a href="#kubernetes-ingress-nginx-容器路由，导致丢失publicPath" class="headerlink" title="kubernetes ingress nginx 容器路由，导致丢失publicPath"></a>kubernetes ingress nginx 容器路由，导致丢失publicPath</h3><blockquote>
<p>访问路径如果不为<code>/</code>结尾，并且访问的为目录（当不做预渲染的时候不会生成路由对应的目录与html则不会有问题）nginx则会重定向到<code>/</code>结尾，会导致<br>内部重定向时跳出容器nginx从而丢失publicPath。</p>
</blockquote>
<p>修改容器的nginx配置<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">  root   /usr/vue/device/dist/;</span><br><span class="line">  if (-d $request_filename) &#123;</span><br><span class="line">    rewrite ^/(.*)([^/])$ $scheme://$host/device/$1$2/ permanent;</span><br><span class="line">  &#125;</span><br><span class="line">  index  index.html index.htm;</span><br><span class="line">  try_files $uri $uri/ /index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>其中<code>device</code>就是publicPath</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li>[1] <a href="https://segmentfault.com/a/1190000004292479" target="_blank" rel="noopener">浏览器渲染机制</a></li>
<li>[2] <a href="https://segmentfault.com/a/1190000018182165?utm_source=tag-newest" target="_blank" rel="noopener">前端prerender-spa-plugin预渲染</a></li>
<li>[3] <a href="https://www.cnblogs.com/z-books/p/12410840.html" target="_blank" rel="noopener">nginx下URL末尾自动加斜杠</a></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>预渲染</tag>
        <tag>prerender-spa-plugin</tag>
      </tags>
  </entry>
  <entry>
    <title>制作自己的npm包并排除第三方依赖</title>
    <url>/2020/06/12/%E5%88%B6%E4%BD%9C%E8%87%AA%E5%B7%B1%E7%9A%84npm%E5%8C%85%E5%B9%B6%E6%8E%92%E9%99%A4%E7%AC%AC%E4%B8%89%E6%96%B9%E4%BE%9D%E8%B5%96/</url>
    <content><![CDATA[<p>在工作中，我们可能会遇到第三方包所提供的功能无法满足我们的需求的时候，或者公司公共组件。我们需要制作自己的npm包。</p>
<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><ol>
<li>在<code>npmjs.org</code>注册账户（公司私服则需要运维开账户）。</li>
<li>检查本地<code>npm config registry</code>是否为<code>npmjs.org</code>或者公司私服地址。</li>
<li>本地npm登录<code>npm login</code>输入账户/密码。然后会让你输入邮箱地址，这个为npmjs上配置的邮件地址。</li>
</ol>
<h3 id="编译npm项目"><a href="#编译npm项目" class="headerlink" title="编译npm项目"></a>编译npm项目</h3><blockquote>
<p>可参考此项目 <a href="https://github.com/zhouxianjun/muse-ui-fabric" target="_blank" rel="noopener">https://github.com/zhouxianjun/muse-ui-fabric</a></p>
</blockquote>
<ol>
<li>使用vue cli3 创建项目。</li>
<li>如果组件中有使用到第三方依赖包并且不想编译在自己的组件中，则需要配置vue.config.js externals<blockquote>
<p>我这里只是做了一个例子，实际情况看你有哪些第三方依赖不想编译则自行配置</p>
</blockquote>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">          config.externals(&#123;</span><br><span class="line">                <span class="string">'lodash'</span>: &#123;</span><br><span class="line">                    commonjs: <span class="string">"lodash"</span>,<span class="comment">//如果我们的库运行在Node.js环境中，import _ from 'lodash'等价于const _ = require('lodash')</span></span><br><span class="line">                    commonjs2: <span class="string">"lodash"</span>,<span class="comment">//同上</span></span><br><span class="line">                    amd: <span class="string">"lodash"</span>,<span class="comment">//如果我们的库使用require.js等加载,等价于 define(["lodash"], factory);</span></span><br><span class="line">                    root: <span class="string">"_"</span> <span class="comment">// 这个为lodash暴露的变量</span></span><br><span class="line">                &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>在新建的项目中的components 目录下的文件全部删除（需要先把引用到的地方删除），然后把你的代码写在里面（当然你也可以不放在components中，只是我喜欢放在这里）。</li>
<li>自己可以在App.vue中引用自己的组件测试。</li>
<li>测通过后使用vue cli 打包<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue-cli-service build --mode production --target lib ./src/components/index.js</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><ol>
<li>在<code>package.json</code>中把private修改为false（如果你买了私有仓库就不用改）。</li>
<li>在<code>package.json</code>新增或修改<code>main</code>字段为：<code>dist/你的项目名称.umd.min.js</code>。</li>
<li><p>发布到仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果修改了代码想要重新发布，则必须先把<code>package.json</code>中的版本号<code>version</code>自行修改。</p>
</li>
<li>发布后，可以再新建一个空的vue项目，直接引用你刚才发布的组件，如果你组件中有依赖第三方组件，则npm会自动下载所需要的所有依赖，<br>如果在使用项目中不想让组件中的依赖编译到chunk-vendors文件中，则可以在使用项目中配置externals，例如：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">          config.externals(&#123;</span><br><span class="line">                <span class="string">'lodash'</span>: <span class="string">'_'</span></span><br><span class="line">          &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>好了，今天就讲到这里，如有同学需要查看分析包内容则可以使用<code>vue ui</code>在任务中运行一个task然后点击分析，就可以分析每个打包后的js由哪些组成了。</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>npm</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>npmjs</tag>
        <tag>制作npm</tag>
      </tags>
  </entry>
  <entry>
    <title>用muse ui + fabricjs做海报编辑器</title>
    <url>/2019/05/01/%E7%94%A8muse-ui-+-fabricjs%E5%81%9A%E6%B5%B7%E6%8A%A5%E7%BC%96%E8%BE%91%E5%99%A8/</url>
    <content><![CDATA[<h2 id="功能点"><a href="#功能点" class="headerlink" title="功能点"></a>功能点</h2><h3 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h3><blockquote>
<p>由于画板上会有很多图片元素，并且我们需要对每个元素设置不同对圆角以及透明度，所以我们需要在添加图片的时候给当前元素生成一个唯一ID来标示它，并且把它的所有配置属性存储。</p>
</blockquote>
<h4 id="图片源"><a href="#图片源" class="headerlink" title="图片源"></a>图片源</h4><figure class="highlight javascript"><figcaption><span>1.6</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param </span>url 图片数据：本地地址、远程地址、base64</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param </span>options 图片配置：具体请查看fabric官网doc，这里注意的是，如果图片源为远程地址，则需要配置跨域访问</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">async</span> loadImg (url, options = &#123;&#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        fabric.Image.fromURL(url, img =&gt; resolve(img), &#123;</span><br><span class="line">            ...this.optionsOfType(<span class="string">'image'</span>),</span><br><span class="line">            ...options</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="圆角"><a href="#圆角" class="headerlink" title="圆角"></a>圆角</h4><blockquote>
<p>主要使用图片的<code>clipTo</code>的回调函数，我们可以在当前函数对当前图片画圆<code>arc</code>.这里其实就是canvas的arc函数。<br><figure class="highlight javascript"><figcaption><span>1.6</span></figcaption><table><tr><td class="code"><pre><span class="line">ctx =&gt; ctx.arc(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>.radius[img.id].val, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="透明度"><a href="#透明度" class="headerlink" title="透明度"></a>透明度</h4><blockquote>
<p>这里只要设置当前选择图片的style（opacity）即可，然后再重新render画板。<br><figure class="highlight javascript"><figcaption><span>1.6</span></figcaption><table><tr><td class="code"><pre><span class="line">setActiveStyle (style) &#123;</span><br><span class="line">    <span class="keyword">const</span> object = <span class="keyword">this</span>.canvas.getActiveObject();</span><br><span class="line">    <span class="keyword">if</span> (!object) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (object.setSelectionStyles &amp;&amp; object.isEditing) &#123;</span><br><span class="line">        object.setSelectionStyles(style);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">Reflect</span>.ownKeys(style).forEach(<span class="function"><span class="params">item</span> =&gt;</span> object.set(item, style[item]));</span><br><span class="line">    &#125;</span><br><span class="line">    object.setCoords();</span><br><span class="line">    <span class="keyword">this</span>.canvas.requestRenderAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="添加文字"><a href="#添加文字" class="headerlink" title="添加文字"></a>添加文字</h3><blockquote>
<p>这里采用fabric的<code>IText</code>函数创建一个文本控件。<br><figure class="highlight javascript"><figcaption><span>1.6</span></figcaption><table><tr><td class="code"><pre><span class="line">addText (content = <span class="string">'text'</span>, options = &#123;&#125;) &#123;</span><br><span class="line">    <span class="keyword">const</span> text = <span class="keyword">new</span> fabric.IText(content, <span class="built_in">Object</span>.assign(<span class="keyword">this</span>.optionsOfType(<span class="string">'i-text'</span>), &#123;</span><br><span class="line">        left: <span class="keyword">this</span>.canvas.width / <span class="number">2</span>,</span><br><span class="line">        top: <span class="keyword">this</span>.canvas.height / <span class="number">2</span>,</span><br><span class="line">        fill: <span class="string">'#000000'</span>,</span><br><span class="line">        scaleX: <span class="number">0.5</span>,</span><br><span class="line">        scaleY: <span class="number">0.5</span>,</span><br><span class="line">        hasRotatingPoint: <span class="literal">true</span></span><br><span class="line">    &#125;, options));</span><br><span class="line">    <span class="keyword">this</span>.addAndSelect(text);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="透明"><a href="#透明" class="headerlink" title="透明"></a>透明</h4><blockquote>
<p>与图片透明度一样，设置<code>opacity</code>样式即可。</p>
</blockquote>
<h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><blockquote>
<p>需要设置控件属性<code>fontFamily</code>。目前实现的字体：’Arial’, ‘Helvetica’, ‘宋体’, ‘黑体’, ‘微软雅黑’, ‘楷体’, ‘仿宋’, ‘Verdana’, ‘Times New Roman’, ‘Roboto’, ‘Open Sans’, ‘Lato’, ‘Bellefair’, ‘Fresca’, ‘Raleway’</p>
</blockquote>
<h4 id="大小"><a href="#大小" class="headerlink" title="大小"></a>大小</h4><blockquote>
<p>设置控件属性<code>fontSize</code></p>
</blockquote>
<h4 id="对齐方式"><a href="#对齐方式" class="headerlink" title="对齐方式"></a>对齐方式</h4><blockquote>
<p>设置控件属性<code>textAlign</code>:left、center、right、justify</p>
</blockquote>
<h4 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h4><blockquote>
<p>使用第三方选择颜色组件：<code>vue-color</code>中的<code>Sketch</code>具体去npm查看。获取rgba。设置控件的<code>fill</code>样式即可。</p>
</blockquote>
<h4 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h4><ul>
<li>粗体 - 设置属性<code>fontWeight</code>为<code>blob</code>或者<code>normal</code></li>
<li>斜体 - 设置属性<code>fontStyle</code>为<code>italic</code>或者<code>normal</code></li>
<li>下划线 - 设置属性<code>underline</code>为<code>true</code>或者<code>false</code></li>
<li>删除线 - 设置属性<code>linethrough</code>为<code>true</code>或者<code>false</code></li>
<li>上划线 - 设置属性<code>overline</code>为<code>true</code>或者<code>false</code><h4 id="行高"><a href="#行高" class="headerlink" title="行高"></a>行高</h4><blockquote>
<p>设置控件属性：<code>lineHeight</code></p>
</blockquote>
<h3 id="层级移动"><a href="#层级移动" class="headerlink" title="层级移动"></a>层级移动</h3><h4 id="上移"><a href="#上移" class="headerlink" title="上移"></a>上移</h4><blockquote>
<p>获取当前选择控件调用控件<code>bringToFront</code>函数</p>
</blockquote>
<h4 id="下移"><a href="#下移" class="headerlink" title="下移"></a>下移</h4><blockquote>
<p>获取当前选择控件调用控件<code>sendToBack</code>函数</p>
</blockquote>
<h3 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h3><blockquote>
<p>与添加图片一样可以从多种数据源添加。</p>
<figure class="highlight javascript"><figcaption><span>1.6</span></figcaption><table><tr><td class="code"><pre><span class="line">setBackgroundImage (img, opt = &#123;&#125;) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; _radius, _resizeMode, _opacity &#125; = opt;</span><br><span class="line">    <span class="comment">// 获取图片最大的半径</span></span><br><span class="line">    <span class="keyword">this</span>.backgroundImageRadiusMax = <span class="keyword">this</span>.imageMaxRange(img);</span><br><span class="line">    <span class="comment">// 设置图片当前圆角半径</span></span><br><span class="line">    <span class="keyword">this</span>.backgroundImageRadius = _radius || <span class="keyword">this</span>.backgroundImageRadiusMax;</span><br><span class="line">    <span class="comment">// 设置当前图片填充模式</span></span><br><span class="line">    <span class="keyword">this</span>.backgroundImageResizeMode = _resizeMode || <span class="keyword">this</span>.backgroundImageResizeMode;</span><br><span class="line">    <span class="comment">// 根据当前画布大小适配图片比例</span></span><br><span class="line">    <span class="keyword">const</span> &#123; width, height &#125; = <span class="keyword">this</span>.canvas;</span><br><span class="line">    <span class="keyword">const</span> scaleX = width / img.width;</span><br><span class="line">    <span class="keyword">const</span> scaleY = height / img.height;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.backgroundImageResizeMode === ResizeMode.stretch) &#123;</span><br><span class="line">        <span class="comment">// 如果上拉伸填充则不保持百分比直接按画布比例缩放</span></span><br><span class="line">        img.set(&#123; scaleX, scaleY, <span class="attr">left</span>: <span class="number">0</span>, <span class="attr">top</span>: <span class="number">0</span> &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果以覆盖整个画布填充则按照最大的画布比例缩放图片宽高，反之为画布的最小比例缩放。</span></span><br><span class="line">        <span class="keyword">const</span> isCover = <span class="keyword">this</span>.backgroundImageResizeMode === ResizeMode.cover;</span><br><span class="line">        <span class="keyword">const</span> scale = isCover ? <span class="built_in">Math</span>.max(scaleX, scaleY) : <span class="built_in">Math</span>.min(scaleX, scaleY);</span><br><span class="line">        img.scale(scale).set(&#123;</span><br><span class="line">            left: width / <span class="number">2</span> - img.width * scale / <span class="number">2</span>,</span><br><span class="line">            top: height / <span class="number">2</span> - img.height * scale / <span class="number">2</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.canvas.setBackgroundImage(img, <span class="keyword">this</span>.canvas.renderAll.bind(<span class="keyword">this</span>.canvas), &#123;</span><br><span class="line">        originX: <span class="string">'left'</span>,</span><br><span class="line">        originY: <span class="string">'top'</span>,</span><br><span class="line">        opacity: _opacity || <span class="number">1</span>,</span><br><span class="line">        clipTo: <span class="function"><span class="params">ctx</span> =&gt;</span> ctx.arc(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>.backgroundImageRadius, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>, <span class="literal">true</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">this</span>.currentBackgroundImg = img;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<h3 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h3><figure class="highlight javascript"><figcaption><span>1.6</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.canvas.setBackgroundColor(<span class="keyword">this</span>.rgba, <span class="keyword">this</span>.canvas.renderAll.bind(<span class="keyword">this</span>.canvas));</span><br></pre></td></tr></table></figure>
<h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><blockquote>
<p>获取当前控件，从画布中删除<br><figure class="highlight javascript"><figcaption><span>1.6</span></figcaption><table><tr><td class="code"><pre><span class="line">removeActive () &#123;</span><br><span class="line">    <span class="keyword">const</span> active = <span class="keyword">this</span>.canvas.getActiveObject();</span><br><span class="line">    <span class="keyword">if</span> (active) &#123;</span><br><span class="line">        <span class="keyword">this</span>.remove(active);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> objects = <span class="keyword">this</span>.canvas.getActiveObjects();</span><br><span class="line">        <span class="keyword">this</span>.canvas.discardActiveObject(<span class="literal">null</span>);</span><br><span class="line">        objects.forEach(<span class="function"><span class="params">object</span> =&gt;</span> <span class="keyword">this</span>.remove(object));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">remove (obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj &amp;&amp; obj._remove !== <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.canvas.remove(obj);</span><br><span class="line">        <span class="built_in">Reflect</span>.deleteProperty(<span class="keyword">this</span>.radius, obj.id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="保存-amp-导出"><a href="#保存-amp-导出" class="headerlink" title="保存&amp;导出"></a>保存&amp;导出</h3><figure class="highlight javascript"><figcaption><span>1.6</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> save () &#123;</span><br><span class="line">    <span class="keyword">const</span> before = <span class="keyword">await</span> <span class="keyword">this</span>.beforeSave(<span class="keyword">this</span>.canvas.getObjects().lenght, <span class="keyword">this</span>.canvas.backgroundImage, <span class="keyword">this</span>.canvas.backgroundColor);</span><br><span class="line">    <span class="keyword">if</span> (before === <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!fabric.Canvas.supports(<span class="string">'toDataURL'</span>)) &#123;</span><br><span class="line">        alert(<span class="string">'This browser doesn\'t provide means to serialize canvas to an image'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> json = <span class="keyword">this</span>.canvas.toJSON([<span class="string">'id'</span>]);</span><br><span class="line">        <span class="keyword">if</span> (json.backgroundImage) &#123;</span><br><span class="line">            json.backgroundImage._radius = <span class="keyword">this</span>.backgroundImageRadius;</span><br><span class="line">            json.backgroundImage._resizeMode = <span class="keyword">this</span>.backgroundImageResizeMode;</span><br><span class="line">            json.backgroundImage._opacity = <span class="keyword">this</span>.backgroundImageOpacity;</span><br><span class="line">        &#125;</span><br><span class="line">        json.objects.filter(<span class="function"><span class="params">o</span> =&gt;</span> o.type === <span class="string">'image'</span> &amp;&amp; <span class="built_in">Reflect</span>.has(<span class="keyword">this</span>.radius, o.id)).forEach(<span class="function"><span class="params">o</span> =&gt;</span> &#123;</span><br><span class="line">            o._radius = <span class="keyword">this</span>.radius[o.id].val;</span><br><span class="line">            <span class="built_in">Reflect</span>.deleteProperty(o, <span class="string">'id'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">this</span>.onSave(json, <span class="keyword">this</span>.canvas.toDataURL(<span class="string">'png'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="加载数据"><a href="#加载数据" class="headerlink" title="加载数据"></a>加载数据</h3><figure class="highlight javascript"><figcaption><span>1.6</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> loadJSON (val) &#123;</span><br><span class="line">    <span class="keyword">if</span> (val) &#123;</span><br><span class="line">        <span class="keyword">const</span> json = <span class="keyword">typeof</span> val === <span class="string">'string'</span> ? <span class="built_in">JSON</span>.parse(val) : val;</span><br><span class="line">        <span class="keyword">if</span> (json.background) &#123;</span><br><span class="line">            <span class="keyword">this</span>.canvas.setBackgroundColor(json.background, <span class="keyword">this</span>.canvas.renderAll.bind(<span class="keyword">this</span>.canvas));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (json.backgroundImage) &#123;</span><br><span class="line">            <span class="keyword">const</span> img = <span class="keyword">await</span> <span class="keyword">this</span>.loadImg(json.backgroundImage.src, json.backgroundImage);</span><br><span class="line">            <span class="keyword">this</span>.setBackgroundImage(img, json.backgroundImage);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(json.objects)) &#123;</span><br><span class="line">            <span class="keyword">await</span> <span class="keyword">this</span>.loadData(json.objects);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.canvas.requestRenderAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">async</span> loadData (data) &#123;</span><br><span class="line">    <span class="keyword">if</span> (data) &#123;</span><br><span class="line">        data = <span class="built_in">Array</span>.isArray(data) ? data : <span class="built_in">Array</span>.of(data);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> obj <span class="keyword">of</span> data) &#123;</span><br><span class="line">            <span class="keyword">if</span> (obj.type === <span class="string">'image'</span>) &#123;</span><br><span class="line">                <span class="built_in">Reflect</span>.deleteProperty(obj, <span class="string">'clipTo'</span>);</span><br><span class="line">                <span class="keyword">await</span> <span class="keyword">this</span>.addImg(obj.src, obj);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (obj.type === <span class="string">'i-text'</span>) &#123;</span><br><span class="line">                <span class="keyword">await</span> <span class="keyword">this</span>.addText(obj.text, obj);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>哎，本人懒人病发了，后面的直接贴代码了，如有不明之处或错误地方可以在当前页面评论交流，或<a href="https://github.com/zhouxianjun/muse-ui-fabric/issues" target="_blank" rel="noopener">Github issue</a>。<br>为了使用方便，已上传<code>npm</code> <a href="https://www.npmjs.com/package/muse-ui-fabric" target="_blank" rel="noopener">muse-ui-fabric</a></p>
</blockquote>
<iframe id="cp_embed_JeEboJ" src="//codepen.io/zhouxianjun/embed/JeEboJ?height=600&theme-id=0&slug-hash=JeEboJ&default-tab=[js,result]&embed-version=2" scrolling="no" frameborder="no" height="600" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe>
]]></content>
      <categories>
        <category>前端</category>
        <category>fabric</category>
      </categories>
      <tags>
        <tag>fabric</tag>
        <tag>poster</tag>
        <tag>muse ui</tag>
        <tag>海报</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring boot JDBC动态数据源 starter</title>
    <url>/2019/09/17/Spring-boot-JDBC%E5%8A%A8%E6%80%81%E6%95%B0%E6%8D%AE%E6%BA%90-starter/</url>
    <content><![CDATA[<p>在平时开发过程中，很多内部的项目都是直接访问多个数据库，这样平时一个项目一个数据库就不够用了，spring支持多数据源。<br>现在很流行Spring boot自动配置，我在这里分享一个基于Spring boot starter方式的多数据源（动态自动切换）整合方案。</p>
<p>由于我们需要做一个starter，所以我们参照mybatis-spring-boot-start的方式新建两个工程：</p>
<h3 id="1、创建-dynamic-datasource-spring-boot-autoconfigure"><a href="#1、创建-dynamic-datasource-spring-boot-autoconfigure" class="headerlink" title="1、创建 dynamic-datasource-spring-boot-autoconfigure"></a>1、创建 dynamic-datasource-spring-boot-autoconfigure</h3><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alone<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dynamic-datasource-spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dynamic-datasource-spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>dynamic datasource auto configure<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>因为我们是一个spring boot项目，所以我们这里需要继承spring boot的parent，然后依赖spring-boot-starter，<br>和jdbc starter（数据源）、aop starter（切面拦截自动切换数据源）、configuration-processor（为了把实体类的属性在properties中配置的时候可以提示）</p>
<h4 id="DynamicDataSourceProperties-配置类"><a href="#DynamicDataSourceProperties-配置类" class="headerlink" title="DynamicDataSourceProperties 配置类"></a>DynamicDataSourceProperties 配置类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"dynamic.ds"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSourceProperties</span> </span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 数据源map</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> Map&lt;String, DataSourceProperties&gt; datasource;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 默认数据源</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> String defaultDataSource;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 未找到指定数据源是否使用默认数据源</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> Boolean notFoundUseDefault = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">haveDefault</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> defaultDataSource != <span class="keyword">null</span> &amp;&amp; datasource.containsKey(defaultDataSource);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">has</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> datasource.containsKey(name);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定义配置属性自动配置类，前缀为<code>dynamic.ds</code>, 为了简化操作，我们这里数据源的配置直接使用的是Spring中的<code>DataSourceProperties</code>，我们配置类中主要的分为：</p>
<p>1、datasource 配置多个数据源以Key-Value形式，key为数据源名称，Value为<code>DataSourceProperties</code>，例如:dynamic.ds.datasource.xxx.url 其中的xxx为key，url为DataSourceProperties中的属性</p>
<p>2、defaultDataSource 默认数据源，如果配置了<code>spring.datasource.xxx</code>则使用该数据源为默认数据源。</p>
<p>3、notFoundUseDefault 未找到指定数据源是否使用默认数据源，如果使用了一个不存在（没有在第1点中配置的）的数据源，是否使用默认数据源。</p>
<p>@Data 这个注解为lombok中的，主要是自动生成属性的setter和getter。@ConfigurationProperties 为spring中的属性配置注解，会自动把properties中相匹配的属性注入。</p>
<h4 id="DynamicDataSource-继承-AbstractRoutingDataSource"><a href="#DynamicDataSource-继承-AbstractRoutingDataSource" class="headerlink" title="DynamicDataSource 继承 AbstractRoutingDataSource"></a>DynamicDataSource 继承 AbstractRoutingDataSource</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractRoutingDataSource</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 返回当前线程中保存的值</span></span><br><span class="line">		<span class="keyword">return</span> DynamicDataSourceContextHolder.get();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Spring JDBC 包中有一个<code>AbstractRoutingDataSource</code>类，该类为数据源的路由抽象类，<br>我们这里主要使用<code>determineCurrentLookupKey</code>这个方法，返回一个数据源名称即可。</p>
<h4 id="DynamicDataSourceAutoConfiguration-自动初始化配置"><a href="#DynamicDataSourceAutoConfiguration-自动初始化配置" class="headerlink" title="DynamicDataSourceAutoConfiguration 自动初始化配置"></a>DynamicDataSourceAutoConfiguration 自动初始化配置</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(DataSource<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">EnableConfigurationProperties</span>(<span class="title">DynamicDataSourceProperties</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureBefore</span>(<span class="title">DataSourceAutoConfiguration</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Import</span>(<span class="title">DynamicDataSourceAop</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">DynamicDataSourceAutoConfiguration</span> <span class="keyword">implements</span> <span class="title">EnvironmentAware</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> DynamicDataSourceProperties properties;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 其它数据源</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> Map&lt;Object, Object&gt; dataSources;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 默认数据源</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> DataSource defaultDateSource;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">DynamicDataSourceAutoConfiguration</span><span class="params">(DynamicDataSourceProperties properties)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.properties = properties;</span><br><span class="line">		<span class="keyword">this</span>.dataSources = properties.getDatasource().entrySet().stream().collect(</span><br><span class="line">				Collectors.toMap(Map.Entry::getKey, entry -&gt; entry.getValue().initializeDataSourceBuilder().build())</span><br><span class="line">		);</span><br><span class="line">		Assert.notEmpty(properties.getDatasource(), <span class="string">"请配置动态数据源"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		DynamicDataSource dataSource = <span class="keyword">new</span> DynamicDataSource();</span><br><span class="line">		dataSource.setTargetDataSources(<span class="keyword">this</span>.dataSources);</span><br><span class="line">		dataSource.setDefaultTargetDataSource(defaultDateSource);</span><br><span class="line">		<span class="keyword">return</span> dataSource;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnvironment</span><span class="params">(Environment environment)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!properties.haveDefault()) &#123;</span><br><span class="line">			<span class="keyword">if</span> (hasPrefix(environment, <span class="string">"spring.datasource"</span>)) &#123;</span><br><span class="line">				Binder binder = Binder.get(environment);</span><br><span class="line">				defaultDateSource = binder</span><br><span class="line">						.bind(<span class="string">"spring.datasource"</span>, DataSourceProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">						.<span class="title">get</span>()</span></span><br><span class="line"><span class="class">						.<span class="title">initializeDataSourceBuilder</span>()</span></span><br><span class="line"><span class="class">						.<span class="title">build</span>()</span>;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">int</span> size = dataSources.size();</span><br><span class="line">				Assert.isTrue(size &lt;= <span class="number">1</span>, <span class="string">"当前数据源中有多个，但没有指定默认数据源."</span>);</span><br><span class="line">				defaultDateSource = (DataSource) dataSources.values().iterator().next();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			defaultDateSource = (DataSource) dataSources.get(properties.getDefaultDataSource());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">hasPrefix</span><span class="params">(Environment environment, String prefix)</span> </span>&#123;</span><br><span class="line">		AbstractEnvironment env = (AbstractEnvironment) environment;</span><br><span class="line">		<span class="keyword">return</span> env.getPropertySources().stream().filter(p -&gt; p <span class="keyword">instanceof</span> MapPropertySource)</span><br><span class="line">				.anyMatch((p) -&gt; ((MapPropertySource) p).getSource().keySet().stream()</span><br><span class="line">						.anyMatch(k -&gt; k.startsWith(prefix)));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>@Configuration 注解，告诉spring该类是一个配置类，@ConditionalOnClass(DataSource.class) 表示在含有DataSource这个类的情况下有效。<br>@EnableConfigurationProperties 启用属性配置，@AutoConfigureBefore 表示在某个类初始化之前，这里为DataSourceAutoConfiguration。<br>@Import 导入其他需要配置的类。<br>该类实现了EnvironmentAware接口，用于获取用户是否有配置spring.datasource前缀的属性。如果用户没有配置默认数据源，并且配置了spring.datasource则使用该数据源为默认数据源。<br>构造函数很简单，主要是把配置的数据源初始化，没什么可以讲的。<br>然后使用@Bean注解暴露了一个DataSource，就是我们上面的DynamicDataSource，这里主要是把我们的动态数据源放入spring容器，并设置数据源集合以及默认数据源，这样在spring的jdbc流程中可以直接获取到该数据源。</p>
<h4 id="DynamicDataSourceContextHolder"><a href="#DynamicDataSourceContextHolder" class="headerlink" title="DynamicDataSourceContextHolder"></a>DynamicDataSourceContextHolder</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSourceContextHolder</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;String&gt; HOLDER = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">		HOLDER.set(type);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> HOLDER.get();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		HOLDER.remove();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里主要是利用ThreadLocal的特性，把数据源标示保存在当前线程中，避免多线程操作数据源时互相干扰。</p>
<h4 id="TargetDataSource-注解"><a href="#TargetDataSource-注解" class="headerlink" title="TargetDataSource 注解"></a>TargetDataSource 注解</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123; ElementType.METHOD, ElementType.TYPE &#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TargetDataSource &#123;</span><br><span class="line">	<span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个注解主要是配合aop切面自动切换数据源使用的，和@Transaction同理。</p>
<h4 id="DynamicDataSourceAop-动态数据源切面"><a href="#DynamicDataSourceAop-动态数据源切面" class="headerlink" title="DynamicDataSourceAop 动态数据源切面"></a>DynamicDataSourceAop 动态数据源切面</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order</span>(-<span class="number">1</span>)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSourceAop</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Resource</span></span><br><span class="line">	<span class="keyword">private</span> DynamicDataSourceProperties properties;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Around</span>(<span class="string">"@annotation(source)"</span>)</span><br><span class="line">	<span class="meta">@SneakyThrows</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">method</span><span class="params">(ProceedingJoinPoint joinPoint, TargetDataSource source)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> around(joinPoint, source);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Around</span>(<span class="string">"@within(source)"</span>)</span><br><span class="line">	<span class="meta">@SneakyThrows</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">targetClass</span><span class="params">(ProceedingJoinPoint joinPoint, TargetDataSource source)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> around(joinPoint, source);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint, TargetDataSource source)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">		String name = source.value();</span><br><span class="line">		<span class="keyword">if</span> (!properties.has(name)) &#123;</span><br><span class="line">			Assert.isTrue(properties.getNotFoundUseDefault(), <span class="string">"指定的数据源: "</span> + name + <span class="string">" 未配置，并 notFoundUseDefault is false."</span>);</span><br><span class="line">			log.warn(<span class="string">"指定的数据源: &#123;&#125; 未配置，使用默认数据源."</span>, name);</span><br><span class="line">			<span class="keyword">return</span> joinPoint.proceed();</span><br><span class="line">		&#125;</span><br><span class="line">		DynamicDataSourceContextHolder.set(name);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> joinPoint.proceed();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			DynamicDataSourceContextHolder.clear();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@PostConstruct</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		log.info(<span class="string">"dynamic datasource aop init ok."</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的@Order必须要比spring事务的order要小，也就是说该切面必须比spring的事务先执行，否则无效。<br>我们这里使用了两个@Around环绕通知，一个拦截方法上含有TargetDataSource注解的，另一个拦截方法的目标类上含有TargetDataSource注解的。<br>在调用目标方法之前把需要的数据源标示保存到当前线程中，然后执行目标方法。最后别忘记要把当前线程清空，否则会导致内存溢出。</p>
<p>写到这里，我们的动态数据源的配置类就已经写完了，但是这个时候spring并不认识我们，所以我们需要告诉它：<br>在resource目录新建META-INF目录并且新建spring.factories文件，内容如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">com.alone.spring.boot.autoconfigure.dynamic.datasource.DynamicDataSourceAutoConfiguration</span><br></pre></td></tr></table></figure></p>
<p>告诉spring我们的DynamicDataSourceAutoConfiguration类为自动配置类。</p>
<h3 id="2、创建-dynamic-datasource-spring-boot-starter"><a href="#2、创建-dynamic-datasource-spring-boot-starter" class="headerlink" title="2、创建 dynamic-datasource-spring-boot-starter"></a>2、创建 dynamic-datasource-spring-boot-starter</h3><p>这个工程可要可不要，这里主要是为了按照spring boot starter的规范，所以才分为了两个工程，如果你嫌麻烦可以不要这个工程即可。<br>该工程不需要resource以及class目录，只需要pom中依赖第一步的工程即可，并且该工程不需要继承spring boot parent。</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="新建测试工程-dynamic-datasource-demo"><a href="#新建测试工程-dynamic-datasource-demo" class="headerlink" title="新建测试工程 dynamic-datasource-demo"></a>新建测试工程 dynamic-datasource-demo</h4><h4 id="pom-xml-1"><a href="#pom-xml-1" class="headerlink" title="pom.xml"></a>pom.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alone<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dynamic-datasource-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dynamic-datasource-demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alone<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dynamic-datasource-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.46<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>依赖，我们的dynamic-datasource-spring-boot-starter，并且依赖数据驱动包，我这里用的mysql。</p>
<h4 id="创建-测试服务-DemoService"><a href="#创建-测试服务-DemoService" class="headerlink" title="创建 测试服务 DemoService"></a>创建 测试服务 DemoService</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoService</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Resource</span></span><br><span class="line">	<span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">defaultMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(jdbcTemplate.queryForList(<span class="string">"select * from t_order"</span>));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@TargetDataSource</span>(<span class="string">"other"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">other</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(jdbcTemplate.queryForList(<span class="string">"select * from tab_flow"</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第一个 defaultMethod 为默认数据源，第二个我们在方法上添加了@TargetDataSource注解并且赋值为other数据源。</p>
<h4 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dynamic.ds.datasource.other.url = jdbc:mysql://url/other?characterEncoding=utf8&amp;useSSL=false&amp;autoReconnect=true&amp;failOverReadOnly=false&amp;allowMultiQueries=true</span><br><span class="line">dynamic.ds.datasource.other.username = root</span><br><span class="line">dynamic.ds.datasource.other.password = xxx</span><br><span class="line">dynamic.ds.datasource.other.driver-class-name = com.mysql.jdbc.Driver</span><br><span class="line"></span><br><span class="line">spring.datasource.url = jdbc:mysql://url/default?characterEncoding=utf8&amp;useSSL=false&amp;autoReconnect=true&amp;failOverReadOnly=false&amp;allowMultiQueries=true </span><br><span class="line">spring.datasource.username = root</span><br><span class="line">spring.datasource.password = xxx</span><br><span class="line">spring.datasource.driver-class-name = com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure>
<p>大功告成。</p>
<p>全部代码在Github： <a href="https://github.com/zhouxianjun/dynamic-datasource-spring-boot-starter" target="_blank" rel="noopener">dynamic-datasource-spring-boot-starter</a>、<a href="https://github.com/zhouxianjun/dynamic-datasource-spring-boot-autoconfigure" target="_blank" rel="noopener">dynamic-datasource-spring-boot-autoconfigure</a>,<br>也可以直接使用jitpack源：<a href="https://jitpack.io/#zhouxianjun/dynamic-datasource-spring-boot-starter" target="_blank" rel="noopener"><img src="https://jitpack.io/v/zhouxianjun/dynamic-datasource-spring-boot-starter.svg" alt></a>，如果你使用了私服仓库请配置你的setting.xml中的mirrorOf为：<code>*,!jitpack.io</code></p>
]]></content>
      <categories>
        <category>后端</category>
        <category>Java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring boot</tag>
        <tag>starter</tag>
        <tag>jdbc</tag>
        <tag>动态数据源</tag>
        <tag>多数据源</tag>
      </tags>
  </entry>
  <entry>
    <title>useDialog hook 封装 el-dialog</title>
    <url>/2024/04/06/useDialog-hook-%E5%B0%81%E8%A3%85-el-dialog/</url>
    <content><![CDATA[<p>在前端开发中，弹窗是一个常见的需求，而Element UI框架中的el-dialog组件提供了弹窗的基本功能。然而，在实际开发中，我们可能会遇到一些需要定制化的需求，<br>比如需要对弹窗进行二次封装，以便在整个项目中统一管理弹窗的样式和行为。在这篇文章中，我将分享如何使用useDialog Hook来封装el-dialog，以实现更灵活、更易用的弹窗组件。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在实际开发过程中，我们经常遇到一个场景：一个通用的购买组件需要在多个页面中使用。例如，在一个订阅服务的应用程序中，用户可能在订阅页面直接进行购买操作，同时，在其他页面浏览不同的服务时，根据业务逻辑判断是否需要购买，则需弹出同样的购买对话框提示用户。</p>
<p>为了实现这一功能，我们通常会采取以下步骤：</p>
<p>封装购买组件：首先创建一个通用的购买组件，以便在不同的页面和场景下复用。<br>在订阅页面渲染购买组件：将购买组件直接嵌入到订阅页面中。<br>在其他页面使用el-dialog展示购买组件：在不同的功能页面上，通过el-dialog来控制购买组件的显示，利用一个visible状态变量（通常是一个ref响应式变量）来动态控制对话框的弹出与关闭。<br>以上实现方式虽然可以满足功能需求，但随着该购买组件被越来越多的页面和功能所使用，维护起来就变得越加复杂和繁琐。我们必须在每个需要使用该组件的页面中重复编写控制显示隐藏的逻辑代码。</p>
<p>因此，一个明显的问题出现了：有没有更好的方法来简化这个过程？是否可以通过某种方式，使用一个单独的函数来全局控制购买组件的打开或关闭，从而减少代码重复并降低维护成本呢？</p>
<h2 id="什么是useDialog-Hook？"><a href="#什么是useDialog-Hook？" class="headerlink" title="什么是useDialog Hook？"></a>什么是useDialog Hook？</h2><p>在Vue中，Hook是一种让你在函数式组件或者API中“钩入”Vue特性的方式。它们通常在合成API(<code>Composition API</code>)中使用，这是Vue提供的一套响应式和可复用逻辑功能的集合。<br>例如，<code>useDialog</code> Hook可能就是一个封装了<code>&lt;el-dialog&gt;</code>组件基本功能的自定义Hook，并可能还提供了附加的特性以便更方便地在项目中管理&amp;展示弹窗。</p>
<h2 id="useDialog-Hook的实现"><a href="#useDialog-Hook的实现" class="headerlink" title="useDialog Hook的实现"></a>useDialog Hook的实现</h2><p>我们需要达到的目标：</p>
<ol>
<li>能够满足基础用法，传入<code>el-dialog</code>的基础属性以及默认slot显示的内容，导出 <code>openDialog</code> 和 <code>closeDialog·</code>函数</li>
<li>支持<code>el-dialog</code>的事件配置</li>
<li>支持默认slot组件的属性配置</li>
<li>支持<code>el-dialog</code>其他<code>slot</code>配置，如<code>header</code>和<code>footer</code>等</li>
<li>在内容组件中抛出特定事件支持关闭dialog</li>
<li>支持显示内容为<code>jsx</code>、<code>普通文本</code>、<code>Vue Component</code></li>
<li>支持在显示内容中控制是否可以关闭的回调函数，例如<code>beforeClose</code></li>
<li>支持显示之前钩子例如<code>onBeforeOpen</code></li>
<li>支持定义和弹出时修改配置属性</li>
<li>支持继承root vue的prototype，可以使用例如<code>vue-i18n</code>的<code>$t</code>函数</li>
<li>支持<code>ts</code>参数提示</li>
</ol>
<h3 id="准备useDialog-ts文件实现类型定义"><a href="#准备useDialog-ts文件实现类型定义" class="headerlink" title="准备useDialog.ts文件实现类型定义"></a>准备<code>useDialog.ts</code>文件实现类型定义</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; Ref &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> &#123; h, render &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> &#123; ElDialog &#125; <span class="keyword">from</span> <span class="string">'element-plus'</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123;</span><br><span class="line">  ComponentInternalInstance,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'@vue/runtime-core'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Content = Parameters&lt;<span class="keyword">typeof</span> h&gt;[<span class="number">0</span>] | <span class="built_in">string</span> | JSX.Element</span><br><span class="line"><span class="comment">// 使用 InstanceType 获取 ElDialog 组件实例的类型</span></span><br><span class="line"><span class="keyword">type</span> ElDialogInstance = InstanceType&lt;<span class="keyword">typeof</span> ElDialog&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从组件实例中提取 Props 类型</span></span><br><span class="line"><span class="keyword">type</span> DialogProps = ElDialogInstance[<span class="string">'$props'</span>] &amp; &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> ElDialogSlots &#123;</span><br><span class="line">  header?: <span class="function">(<span class="params">...args: <span class="built_in">any</span>[]</span>) =&gt;</span> Content</span><br><span class="line">  footer?: <span class="function">(<span class="params">...args: <span class="built_in">any</span>[]</span>) =&gt;</span> Content</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Options&lt;P&gt; &#123;</span><br><span class="line">  dialogProps?: DialogProps</span><br><span class="line">  dialogSlots?: ElDialogSlots</span><br><span class="line">  contentProps?: P</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="接着实现普通useDialog函数"><a href="#接着实现普通useDialog函数" class="headerlink" title="接着实现普通useDialog函数"></a>接着实现普通<code>useDialog</code>函数</h3><p>下面函数我们实现了基础的用法，包括了：1，2，3，4，6，11 目标</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useDialog</span>&lt;<span class="title">P</span> = <span class="title">any</span>&gt;(<span class="params">content: Content, options?: Ref&lt;Options&lt;P&gt;&gt; | Options&lt;P&gt;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> dialogInstance: ComponentInternalInstance | <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">let</span> fragment: Element | <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 关闭并卸载组件</span></span><br><span class="line">  <span class="keyword">const</span> closeAfter = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (fragment) &#123;</span><br><span class="line">      render(<span class="literal">null</span>, fragment <span class="keyword">as</span> unknown <span class="keyword">as</span> Element) <span class="comment">// 卸载组件</span></span><br><span class="line">      fragment.textContent = <span class="string">''</span> <span class="comment">// 清空文档片段</span></span><br><span class="line">      fragment = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    dialogInstance = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">closeDialog</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dialogInstance)</span><br><span class="line">      dialogInstance.props.modelValue = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建并挂载组件</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">openDialog</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dialogInstance) &#123;</span><br><span class="line">      closeDialog()</span><br><span class="line">      closeAfter()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> &#123; dialogProps, contentProps &#125; = options</span><br><span class="line">    fragment = <span class="built_in">document</span>.createDocumentFragment() <span class="keyword">as</span> unknown <span class="keyword">as</span> Element</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> vNode = h(ElDialog, &#123;</span><br><span class="line">      ...dialogProps,</span><br><span class="line">      modelValue: <span class="literal">true</span>,</span><br><span class="line">      onClosed: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        dialogProps?.onClosed?.()</span><br><span class="line">        closeAfter()</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> [<span class="keyword">typeof</span> content === <span class="string">'string'</span></span><br><span class="line">        ? content</span><br><span class="line">        : h(content <span class="keyword">as</span> <span class="built_in">any</span>, &#123;</span><br><span class="line">          ...contentProps,</span><br><span class="line">        &#125;)],</span><br><span class="line">      ...options.dialogSlots,</span><br><span class="line">    &#125;)</span><br><span class="line">    render(vNode, fragment)</span><br><span class="line">    dialogInstance = vNode.component</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(fragment)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onUnmounted(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    closeDialog()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; openDialog, closeDialog &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="接下来我们实现目标5"><a href="#接下来我们实现目标5" class="headerlink" title="接下来我们实现目标5"></a>接下来我们实现目标<code>5</code></h3><ol>
<li>需要在定义中支持<code>closeEventName</code></li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Options&lt;P&gt; &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  closeEventName?: <span class="built_in">string</span> <span class="comment">// 新增的属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>修改<code>useDialog</code>函数接收<code>closeEventName</code>事件关闭<code>dialog</code></li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useDialog</span>&lt;<span class="title">P</span> = <span class="title">any</span>&gt;(<span class="params">content: Content, options?: Ref&lt;Options&lt;P&gt;&gt; | Options&lt;P&gt;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// 创建并挂载组件</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">openDialog</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    fragment = <span class="built_in">document</span>.createDocumentFragment() <span class="keyword">as</span> unknown <span class="keyword">as</span> Element</span><br><span class="line">    <span class="comment">// 转换closeEventName事件</span></span><br><span class="line">    <span class="keyword">const</span> closeEventName = <span class="string">`on<span class="subst">$&#123;upperFirst(_options?.closeEventName || <span class="string">'closeDialog'</span>)&#125;</span>`</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> vNode = h(ElDialog, &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> [<span class="keyword">typeof</span> content === <span class="string">'string'</span></span><br><span class="line">        ? content</span><br><span class="line">        : h(content <span class="keyword">as</span> <span class="built_in">any</span>, &#123;</span><br><span class="line">          ...contentProps,</span><br><span class="line">          [closeEventName]: closeDialog, <span class="comment">// 监听自定义关闭事件，并执行关闭</span></span><br><span class="line">        &#125;)],</span><br><span class="line">      ...options.dialogSlots,</span><br><span class="line">    &#125;)</span><br><span class="line">    render(vNode, fragment)</span><br><span class="line">    dialogInstance = vNode.component</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(fragment)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onUnmounted(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    closeDialog()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; openDialog, closeDialog &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="接下来我们实现目标7、8"><a href="#接下来我们实现目标7、8" class="headerlink" title="接下来我们实现目标7、8"></a>接下来我们实现目标<code>7</code>、<code>8</code></h3><ol>
<li>需要在定义中支持 <code>onBeforeOpen</code>， <code>beforeCloseDialog</code> 默认是传给内容组件，有组件调用设置</li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> DialogProps = ElDialogInstance[<span class="string">'$props'</span>] &amp; &#123;</span><br><span class="line">  onBeforeOpen?: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">boolean</span> | <span class="built_in">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>修改<code>useDialog</code>函数接收<code>onBeforeOpen</code>事件&amp;传递<code>beforeCloseDialog</code></li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useDialog</span>&lt;<span class="title">P</span> = <span class="title">any</span>&gt;(<span class="params">content: Content, options?: Ref&lt;Options&lt;P&gt;&gt; | Options&lt;P&gt;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// 创建并挂载组件</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">openDialog</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">const</span> &#123; dialogProps, contentProps &#125; = options</span><br><span class="line">    <span class="comment">// 调用before钩子，如果为false则不打开</span></span><br><span class="line">    <span class="keyword">if</span> (dialogProps?.onBeforeOpen?.() === <span class="literal">false</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 定义当前块关闭前钩子变量</span></span><br><span class="line">    <span class="keyword">let</span> onBeforeClose: <span class="function">(<span class="params">(<span class="params"></span>) =&gt; <span class="built_in">Promise</span>&lt;<span class="built_in">boolean</span> | <span class="built_in">void</span>&gt; | <span class="built_in">boolean</span> | <span class="built_in">void</span></span>) | <span class="params">null</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="params">const</span> <span class="params">vNode</span> = <span class="params">h</span>(<span class="params">ElDialog, &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="comment">// ...</span></span></span></span><br><span class="line"><span class="function"><span class="params">      beforeClose: <span class="keyword">async</span> (<span class="params">done</span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="comment">// 配置`el-dialog`的关闭回调钩子函数</span></span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">const</span> result = <span class="keyword">await</span> onBeforeClose?.(<span class="params"></span>)</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">if</span> (<span class="params">result === <span class="literal">false</span></span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">          <span class="keyword">return</span></span></span></span><br><span class="line"><span class="function"><span class="params">        &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">        done(<span class="params"></span>)</span></span></span><br><span class="line"><span class="function"><span class="params">      &#125;,</span></span></span><br><span class="line"><span class="function"><span class="params">      onClosed: (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">        dialogProps?.onClosed?.(<span class="params"></span>)</span></span></span><br><span class="line"><span class="function"><span class="params">        closeAfter(<span class="params"></span>)</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="comment">// 关闭后回收当前变量</span></span></span></span><br><span class="line"><span class="function"><span class="params">        onBeforeClose = <span class="literal">null</span></span></span></span><br><span class="line"><span class="function"><span class="params">      &#125;,</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;, &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">default</span>: (<span class="params"></span>) =&gt; [<span class="keyword">typeof</span> content === '<span class="built_in">string</span>'</span></span></span><br><span class="line"><span class="function"><span class="params">        ? content</span></span></span><br><span class="line"><span class="function"><span class="params">        : h(<span class="params">content <span class="keyword">as</span> <span class="built_in">any</span>, &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">          <span class="comment">// ...</span></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">          beforeCloseDialog: (<span class="params">fn: (<span class="params">(<span class="params"></span>) =&gt; <span class="built_in">boolean</span> | <span class="built_in">void</span></span>)</span>) =&gt; &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">            <span class="comment">// 把`beforeCloseDialog`传递给`content`，当组件内部使用`props.beforeCloseDialog(fn)`时，会把fn传递给`onBeforeClose`</span></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">            onBeforeClose = fn</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">          &#125;,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">        &#125;</span>)],</span></span></span><br><span class="line"><span class="function"><span class="params">      ...options.dialogSlots,</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;</span>)</span></span><br><span class="line"><span class="function">    <span class="params">render</span>(<span class="params">vNode, fragment</span>)</span></span><br><span class="line"><span class="function">    <span class="params">dialogInstance</span> = <span class="params">vNode</span>.<span class="params">component</span></span></span><br><span class="line"><span class="function">    <span class="params">document</span>.<span class="params">body</span>.<span class="params">appendChild</span>(<span class="params">fragment</span>)</span></span><br><span class="line"><span class="function">  &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  <span class="params">onUnmounted</span>(<span class="params">(<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    closeDialog(<span class="params"></span>)</span></span></span><br><span class="line"><span class="function"><span class="params">  &#125;</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  <span class="params">return</span> &#123; <span class="params">openDialog</span>, <span class="params">closeDialog</span> &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="接下来我们实现目标9、10"><a href="#接下来我们实现目标9、10" class="headerlink" title="接下来我们实现目标9、10"></a>接下来我们实现目标<code>9</code>、<code>10</code></h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义工具函数，获取计算属性的option</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getOptions</span>&lt;<span class="title">P</span>&gt;(<span class="params">options?: Ref&lt;Options&lt;P&gt;&gt; | Options&lt;P&gt;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!options)</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> isRef(options) ? options.value : options</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useDialog</span>&lt;<span class="title">P</span> = <span class="title">any</span>&gt;(<span class="params">content: Content, options?: Ref&lt;Options&lt;P&gt;&gt; | Options&lt;P&gt;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// 获取当前组件实例，用于设置当前dialog的上下文，继承prototype</span></span><br><span class="line">  <span class="keyword">const</span> instance = getCurrentInstance()</span><br><span class="line">  <span class="comment">// 创建并挂载组件，新增`modifyOptions`参数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">openDialog</span>(<span class="params">modifyOptions?: Partial&lt;Options&lt;P&gt;&gt;</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">const</span> _options = getOptions(options)</span><br><span class="line">    <span class="comment">// 如果有修改，则合并options。替换之前的options变量为 _options</span></span><br><span class="line">    <span class="keyword">if</span> (modifyOptions)</span><br><span class="line">      merge(_options, modifyOptions)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> vNode = h(ElDialog, &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 设置当前的上下文为使用者的上下文</span></span><br><span class="line">    vNode.appContext = instance?.appContext || <span class="literal">null</span></span><br><span class="line">    render(vNode, fragment)</span><br><span class="line">    dialogInstance = vNode.component</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(fragment)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onUnmounted(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    closeDialog()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; openDialog, closeDialog &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过上面的封装，我们可以看到使用useDialog Hook之后，我们只需要在需要弹窗的地方引入这个Hook，然后调用openDialog方法即可，非常方便和简洁。<br>而且这样的封装还可以让我们在以后需要修改弹窗逻辑的时候更加方便，只需要在useDialog Hook中进行修改即可，不需要在各个地方进行重复的修改。</p>
<h2 id="使用我们的useDialog-hook-解决我们上面的问题"><a href="#使用我们的useDialog-hook-解决我们上面的问题" class="headerlink" title="使用我们的useDialog hook 解决我们上面的问题"></a>使用我们的<code>useDialog</code> hook 解决我们上面的问题</h2><h3 id="创建components-buy-vue购买组件"><a href="#创建components-buy-vue购买组件" class="headerlink" title="创建components/buy.vue购买组件"></a>创建<code>components/buy.vue</code>购买组件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">  const props = defineProps(&#123;</span><br><span class="line">    from: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      default: &apos;&apos;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  我是购买组件</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<h3 id="在pages-subscription-vue页面中使用buy-vue购买组件"><a href="#在pages-subscription-vue页面中使用buy-vue购买组件" class="headerlink" title="在pages/subscription.vue页面中使用buy.vue购买组件"></a>在<code>pages/subscription.vue</code>页面中使用<code>buy.vue</code>购买组件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">  import Buy from &apos;@/components/buy.vue&apos;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- ... --&gt;</span><br><span class="line">  &lt;Buy from=&quot;subscription&quot; /&gt;</span><br><span class="line">&lt;!-- ... --&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<h3 id="在其他功能页面中弹出buy-vue购买组件"><a href="#在其他功能页面中弹出buy-vue购买组件" class="headerlink" title="在其他功能页面中弹出buy.vue购买组件"></a>在其他功能页面中弹出<code>buy.vue</code>购买组件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">  import &#123; useDialog &#125; from &apos;@/hooks/useDialog&apos;</span><br><span class="line">  const Buy = defineAsyncComponent(() =&gt; import(&apos;@/components/buy.vue&apos;))</span><br><span class="line"></span><br><span class="line">  const &#123; openDialog &#125; = useDialog(Buy, &#123;</span><br><span class="line">    dialogProps: &#123;</span><br><span class="line">      // ...</span><br><span class="line">      title: &apos;购买&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    contentProps: &#123;</span><br><span class="line">      from: &apos;function&apos;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  const onSomeClick = () =&gt; &#123;</span><br><span class="line">    openDialog()</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="其他useDialog-hook的应用"><a href="#其他useDialog-hook的应用" class="headerlink" title="其他useDialog hook的应用"></a>其他useDialog hook的应用</h2><h3 id="beforeClose-amp-closeEventName-示例"><a href="#beforeClose-amp-closeEventName-示例" class="headerlink" title="beforeClose &amp; closeEventName 示例"></a><code>beforeClose</code> &amp; <code>closeEventName</code> 示例</h3><p><code>buy.vue</code>购买组件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">  const props = defineProps(&#123;</span><br><span class="line">    from: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      default: &apos;&apos;,</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeCloseDialog: &#123;</span><br><span class="line">      type: Function,</span><br><span class="line">      default: () =&gt; true,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  const emit = defineEmits([&apos;closeDialog&apos;])</span><br><span class="line"></span><br><span class="line">  props.beforeCloseDialog(() =&gt; &#123;</span><br><span class="line">    // 假如from 为 空字符串不能关闭</span><br><span class="line">    if (!props.from) &#123;</span><br><span class="line">      return false</span><br><span class="line">    &#125;</span><br><span class="line">    return true</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  // 关闭dialog</span><br><span class="line">  const onBuySuccess = () =&gt; emit(&apos;closeDialog&apos;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">  import &#123; useDialog &#125; from &apos;@/hooks/useDialog&apos;</span><br><span class="line">  const Buy = defineAsyncComponent(() =&gt; import(&apos;@/components/buy.vue&apos;))</span><br><span class="line"></span><br><span class="line">  const &#123; openDialog &#125; = useDialog(Buy, &#123;</span><br><span class="line">    dialogProps: &#123;</span><br><span class="line">      // ...</span><br><span class="line">      title: &apos;购买&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    contentProps: &#123;</span><br><span class="line">      from: &apos;&apos;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  const onSomeClick = () =&gt; &#123;</span><br><span class="line">    openDialog()</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过使用useDialog Hook封装el-dialog，我们可以让前端技术变得更加有趣和简洁。希望大家也能尝试一下这样的封装方式，让我们的前端代码变得更加优雅和易维护。就像一位优秀的厨师一样，掌握了精妙的调味技巧，让每道菜都变得美味可口！</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vue3</tag>
        <tag>element-ui</tag>
        <tag>element-plus</tag>
        <tag>hook</tag>
        <tag>el-dialog</tag>
      </tags>
  </entry>
  <entry>
    <title>微前端（qiankun）尝鲜(vue)</title>
    <url>/2021/06/17/%E5%BE%AE%E5%89%8D%E7%AB%AF%EF%BC%88qiankun%EF%BC%89%E5%B0%9D%E9%B2%9C/</url>
    <content><![CDATA[<h2 id="什么是微前端？"><a href="#什么是微前端？" class="headerlink" title="什么是微前端？"></a>什么是微前端？</h2><blockquote>
<p>Techniques, strategies and recipes for building a modern web app with multiple teams that can ship features independently. – <a href="https://micro-frontends.org/" target="_blank" rel="noopener">Micro Frontends</a></p>
<p>微前端是一种多个团队通过独立发布功能的方式来共同构建现代化 web 应用的技术手段及方法策略。</p>
</blockquote>
<p>微前端（Micro-Frontends）是一种类似于微服务的架构，它将微服务的理念应用于浏览器端，即将 Web 应用由单一的单体应用转变为多个小型前端应用聚合为一的应用。各个前端应用还可以独立运行、独立开发、独立部署，从而满足业务快速变化及分布式多团队并行开发的需求。<br>微前端不是单纯的前端框架或者工具，而是一套架构体系，这个概念最早在2016年底由ThoughtWorks提出。</p>
<h2 id="核心价值"><a href="#核心价值" class="headerlink" title="核心价值"></a>核心价值</h2><ul>
<li><p><strong>技术栈无关</strong></p>
<p>主应用不限制接入子应用的技术栈，子应用拥有完全自主权。应用之间不应该有任何直接或间接的技术栈、依赖、以及实现上的耦合。</p>
</li>
<li><p>独立开发、独立部署</p>
<p>微应用仓库独立，前后端可独立开发，部署完成后主框架自动完成同步更新。独立部署的能力在微前端体系中至关重要，能够缩小变更范围，进而降低相关风险。<br>各个微前端都应该有自己的持续交付管道；这些管道可以将微前端构建、测试并部署到生产环境中。</p>
</li>
<li><p>增量升级</p>
<p>在面对各种复杂场景时，我们通常很难对一个已经存在的系统做全量的技术栈升级或重构，而微前端是一种非常好的实施渐进式重构的手段和策略。<br>逐渐升级我们的架构、依赖关系和用户体验。当主框架发生重大变化时每个微前端模块都可以按需升级，不需要整体下线或一次性升级所有内容。如果我们想要尝试新的技术或互动模式，也能在隔离度更好的环境下做试验。</p>
</li>
<li><p>简单、解耦、易维护</p>
<p>微前端架构下的代码库倾向于更小/简单、更容易开发，避免无关组件之间不必要的耦合，让代码更简洁。通过界定清晰的应用边界来降低意外耦合的可能性，更好地避免无意间造成的这类耦合问题。</p>
</li>
</ul>
<p>更多参考文献：</p>
<ul>
<li><a href="https://micro-frontends.org/" target="_blank" rel="noopener">Micro Frontends</a></li>
<li><a href="https://martinfowler.com/articles/micro-frontends.html" target="_blank" rel="noopener">Micro Frontends from martinfowler.com</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/95085796" target="_blank" rel="noopener">微前端的核心价值</a></li>
</ul>
<h2 id="在什么场景下使用？"><a href="#在什么场景下使用？" class="headerlink" title="在什么场景下使用？"></a>在什么场景下使用？</h2><blockquote>
<p>微前端架构旨在解决单体应用在一个相对长的时间跨度下，由于参与的人员、团队的增多、变迁，从一个普通应用演变成一个巨石应用(Frontend Monolith)后，随之而来的应用不可维护的问题。这类问题在企业级 Web 应用中尤其常见。</p>
<ul>
<li>兼容遗留系统</li>
</ul>
</blockquote>
<p>  在现在技术不断更迭，保证技术栈不落后，需要在兼容已有系统的前提下，使用新框架去开发新功能。遗留系统功能已经完善，并且稳定运行，团队没有必要，也没有精力去将遗留系统重构一遍。此时团队如果需要使用新框架，新技术去开发新的应用，使用微前端是很好的解决方案。</p>
<ul>
<li><p>应用聚合</p>
<p>大型的互联网公司，或商业Saas平台，都会为用户/客户提供很多应用和服务，如何为用户呈现具有统一用户体验和一站式的应用聚合成为必须解决的问题。<br>前端聚合已成为一个技术趋势，目前比较理想的解决方案就是微前端。</p>
</li>
<li><p>不同团队间开发同一个应用技术栈不同</p>
<p>把第三方的SaaS应用进行集成或者把第三方私服应用进行集成（比如在公司内部部署的 gitlab）等。以及在已有多个应用的情况下，需要将它们聚合为一个单应用。<br><img src="/images/micro.png" alt></p>
</li>
</ul>
<h2 id="什么是qiankun？"><a href="#什么是qiankun？" class="headerlink" title="什么是qiankun？"></a>什么是qiankun？</h2><p>qiankun 是一个基于 <a href="https://github.com/CanopyTax/single-spa" target="_blank" rel="noopener">single-spa</a> 的<a href="https://micro-frontends.org/" target="_blank" rel="noopener">微前端</a>实现库，旨在帮助大家能更简单、无痛的构建一个生产可用微前端架构系统。</p>
<p>qiankun 孵化自蚂蚁金融科技基于微前端架构的云产品统一接入平台，在经过一批线上应用的充分检验及打磨后，我们将其微前端内核抽取出来并开源，希望能同时帮助社区有类似需求的系统更方便的构建自己的微前端系统，同时也希望通过社区的帮助将 qiankun 打磨的更加成熟完善。</p>
<p>目前 qiankun 已在蚂蚁内部服务了超过 200+ 线上应用，在易用性及完备性上，绝对是值得信赖的。</p>
<ul>
<li>📦 <strong>基于 <a href="https://github.com/CanopyTax/single-spa" target="_blank" rel="noopener">single-spa</a></strong> 封装，提供了更加开箱即用的 API。</li>
<li>📱 <strong>技术栈无关</strong>，任意技术栈的应用均可 使用/接入，不论是 React/Vue/Angular/JQuery 还是其他等框架。</li>
<li>💪 <strong>HTML Entry 接入方式</strong>，让你接入微应用像使用 iframe 一样简单。</li>
<li>🛡​ <strong>样式隔离</strong>，确保微应用之间样式互相不干扰。</li>
<li>🧳 <strong>JS 沙箱</strong>，确保微应用之间 全局变量/事件 不冲突。</li>
<li>⚡️ <strong>资源预加载</strong>，在浏览器空闲时间预加载未打开的微应用资源，加速微应用打开速度。</li>
<li>🔌 <strong>umi 插件</strong>，提供了 <a href="https://github.com/umijs/plugins/tree/master/packages/plugin-qiankun" target="_blank" rel="noopener">@umijs/plugin-qiankun</a> 供 umi 应用一键切换成微前端架构系统。<blockquote>
<p>摘自qiankun介绍</p>
</blockquote>
<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="子应用静态资源404"><a href="#子应用静态资源404" class="headerlink" title="子应用静态资源404"></a>子应用静态资源404</h3></li>
</ul>
<ol>
<li>所有图片等静态资源上传至 cdn，css 中直接引用 cdn 地址（推荐）</li>
<li><p>将字体文件和图片打包成 base64（适用于字体文件和图片体积小的项目）(但总是有一些不符合要求的资源，请使用第三种)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack config loader, 添加以下rule到rules中</span></span><br><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.(png|jpe?g|gif|webp|woff2?|eot|ttf|otf)$/i</span>,</span><br><span class="line">  use: [&#123;</span><br><span class="line">    loader: <span class="string">'url-loader'</span>,</span><br><span class="line">    options: &#123;&#125;,</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// chainWebpack</span></span><br><span class="line">config.module.rule(<span class="string">'fonts'</span>).use(<span class="string">'url-loader'</span>).loader(<span class="string">'url-loader'</span>).options(&#123;&#125;).end();</span><br><span class="line">config.module.rule(<span class="string">'images'</span>).use(<span class="string">'url-loader'</span>).loader(<span class="string">'url-loader'</span>).options(&#123;&#125;).end();</span><br></pre></td></tr></table></figure>
</li>
<li><p>在打包时给其注入完整路径（适用于字体文件和图片体积比较大的项目）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> absolutePath = <span class="string">'子应用万维网可访问url'</span>;</span><br><span class="line"><span class="keyword">const</span> publicPath = <span class="string">`<span class="subst">$&#123;absolutePath&#125;</span><span class="subst">$&#123;config.output.get(<span class="string">'publicPath'</span>)&#125;</span>`</span>;</span><br><span class="line">    config.module</span><br><span class="line">      .rule(<span class="string">'fonts'</span>)</span><br><span class="line">      .use(<span class="string">'url-loader'</span>)</span><br><span class="line">      .loader(<span class="string">'url-loader'</span>)</span><br><span class="line">      .options(&#123;</span><br><span class="line">        limit: <span class="number">4096</span>, <span class="comment">// 小于4kb将会被打包成 base64</span></span><br><span class="line">        fallback: &#123;</span><br><span class="line">          loader: <span class="string">'file-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            name: <span class="string">'fonts/[name].[hash:8].[ext]'</span>,</span><br><span class="line">            publicPath</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      .end();</span><br><span class="line">    config.module</span><br><span class="line">      .rule(<span class="string">'images'</span>)</span><br><span class="line">      .use(<span class="string">'url-loader'</span>)</span><br><span class="line">      .loader(<span class="string">'url-loader'</span>)</span><br><span class="line">      .options(&#123;</span><br><span class="line">        limit: <span class="number">4096</span>, <span class="comment">// 小于4kb将会被打包成 base64</span></span><br><span class="line">        fallback: &#123;</span><br><span class="line">          loader: <span class="string">'file-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            name: <span class="string">'img/[name].[hash:8].[ext]'</span>,</span><br><span class="line">            publicPath</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="css样式隔离"><a href="#css样式隔离" class="headerlink" title="css样式隔离"></a>css样式隔离</h3><p>默认情况qiankun会自动开启沙箱模式，但这个模式无法隔离主应用与子应用、或者同时加载多子应用的场景。<br>qiankun还给出了shadow dom的方案，需要配置<code>sandbox: { strictStyleIsolation: true }</code></p>
<blockquote>
<p>基于 ShadowDOM 的严格样式隔离并不是一个可以无脑使用的方案，大部分情况下都需要接入应用做一些适配后才能正常在 ShadowDOM 中运行起来比如 react 场景下需要解决这些<a href="https://github.com/facebook/react/issues/10422" target="_blank" rel="noopener">问题</a> ，使用者需要清楚开启了 strictStyleIsolation 意味着什么。下面会列出我解决ShadowDom的一些案例。</p>
</blockquote>
<h3 id="js-沙箱"><a href="#js-沙箱" class="headerlink" title="js 沙箱"></a>js 沙箱</h3><p>主要是隔离挂载在<code>window</code>上的变量，而qiankun内部已经帮你处理好了。在子应用运行时访问的<code>window</code>其实是一个<code>Proxy</code>代理对象。<br>所有子应用的全局变量变更都是在闭包中产生的，不会真正回写到 window 上，这样就能避免多实例之间的污染了。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy93Uk5sV0tuMEE1TXdpYWo4MmtYdmNCN09HaWFlVGljMkdOcjZEMEMxTFQ1Wmg0aWFpY2VpYVJRSVVSWk5sb01pYU8wVkQyNXQyUjdKR3JkNDNvOWY5ZHNOZTQwancvNjQw?x-oss-process=image/format,png" alt><br>`</p>
<h3 id="fix-shadow-dom"><a href="#fix-shadow-dom" class="headerlink" title="fix shadow dom"></a>fix shadow dom</h3><ul>
<li><p>getComputedStyle</p>
<p>当获取shadow dom的计算样式的时候传入的element是<code>DocumentFragment</code>,会报错。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getComputedStyle = <span class="built_in">window</span>.getComputedStyle;</span><br><span class="line"><span class="built_in">window</span>.getComputedStyle = <span class="function">(<span class="params">el, ...args</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 如果为shadow dom则直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (el <span class="keyword">instanceof</span> DocumentFragment) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Reflect</span>.apply(getComputedStyle, <span class="built_in">window</span>, [el, ...args]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>elementFromPoint</p>
<p>根据坐标（x, y）当获取一个子应用的元素的时候，会返回shadow root，并不会返回真正的元素。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> elementFromPoint = <span class="built_in">document</span>.elementFromPoint;</span><br><span class="line"><span class="built_in">document</span>.elementFromPoint = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="built_in">Reflect</span>.apply(elementFromPoint, <span class="keyword">this</span>, [x, y]);</span><br><span class="line">  <span class="comment">// 如果坐标元素为shadow则用该shadow再次获取</span></span><br><span class="line">  <span class="keyword">if</span> (result &amp;&amp; result.shadowRoot) &#123;</span><br><span class="line">    <span class="keyword">return</span> result.shadowRoot.elementFromPoint(x, y);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>document 事件 target 为shadow</p>
<p>当我们在document添加click、mousedown、mouseup等事件的时候，回调函数中的<code>event.target</code>不是真正的目标元素，而是shadow root元素。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fix: 点击事件target为shadow元素的问题</span></span><br><span class="line"><span class="keyword">const</span> &#123;<span class="attr">addEventListener</span>: oldAddEventListener, <span class="attr">removeEventListener</span>: oldRemoveEventListener&#125; = <span class="built_in">document</span>;</span><br><span class="line"><span class="keyword">const</span> fixEvents = [<span class="string">'click'</span>, <span class="string">'mousedown'</span>, <span class="string">'mouseup'</span>];</span><br><span class="line"><span class="keyword">const</span> overrideEventFnMap = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> setOverrideEvent = <span class="function">(<span class="params">eventName, fn, overrideFn</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (fn === overrideFn) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!overrideEventFnMap[eventName]) &#123;</span><br><span class="line">    overrideEventFnMap[eventName] = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  overrideEventFnMap[eventName].set(fn, overrideFn);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> resetOverrideEvent = <span class="function">(<span class="params">eventName, fn</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> eventFn = overrideEventFnMap[eventName]?.get(fn);</span><br><span class="line">  <span class="keyword">if</span> (eventFn) &#123;</span><br><span class="line">    overrideEventFnMap[eventName].delete(fn);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> eventFn || fn;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">document</span>.addEventListener = <span class="function">(<span class="params">event, fn, options</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> callback = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 当前事件对象为qiankun盒子，并且当前对象有shadowRoot元素，则fix事件对象为真实元素</span></span><br><span class="line">    <span class="keyword">if</span> (e.target.id?.startsWith(<span class="string">'__qiankun_microapp_wrapper'</span>) &amp;&amp; e.target?.shadowRoot) &#123;</span><br><span class="line">      fn(&#123;...e, <span class="attr">target</span>: e.path[<span class="number">0</span>]&#125;);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    fn(e);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> eventFn = fixEvents.includes(event) ? callback : fn;</span><br><span class="line">  setOverrideEvent(event, fn, eventFn);</span><br><span class="line">  <span class="built_in">Reflect</span>.apply(oldAddEventListener, <span class="built_in">document</span>, [event, eventFn, options]);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">document</span>.removeEventListener = <span class="function">(<span class="params">event, fn, options</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> eventFn = resetOverrideEvent(event, fn);</span><br><span class="line">  <span class="built_in">Reflect</span>.apply(oldRemoveEventListener, <span class="built_in">document</span>, [event, eventFn, options]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="复用公共依赖"><a href="#复用公共依赖" class="headerlink" title="复用公共依赖"></a>复用公共依赖</h3><blockquote>
<p>比如企业中的util、core、request、ui等公共依赖，在微前端中，我们不需要每个子应用都加载一次，这样既浪费资源并且还会导致本来单例的对象，变成了多例。</p>
</blockquote>
<p>在webpack中配置<code>externals</code>。把需要复用的排除打包，然后在<code>index.html</code>中加载排除的lib外链（子应用需要在<code>script</code>或者<code>style</code>标签加上<code>ignore</code>属性，有了这个属性，qiankun 便不会再去加载这个 js/css，而子项目独立运行，这些 js/css 仍能被加载）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">ignore</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"//element-ui.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">ignore</span> <span class="attr">src</span>=<span class="string">"//element-ui.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">externals: &#123;</span><br><span class="line">  <span class="string">'element-ui'</span>: &#123;</span><br><span class="line">    commonjs: <span class="string">'element-ui'</span>,</span><br><span class="line">    commonjs2: <span class="string">'element-ui'</span>,</span><br><span class="line">    amd: <span class="string">'element-ui'</span>,</span><br><span class="line">    root: <span class="string">'ElementUI'</span> <span class="comment">// 外链cdn加载挂载到window上的变量名</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="父子共享（国际化）"><a href="#父子共享（国际化）" class="headerlink" title="父子共享（国际化）"></a>父子共享（国际化）</h3><p>应用注册时或加载时，将依赖传递给子项目<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注册</span></span><br><span class="line">registerMicroApps([</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'micro-1'</span>, </span><br><span class="line">    entry: <span class="string">'http://localhost:9001/micro-1'</span>, </span><br><span class="line">    container: <span class="string">'#micro-1'</span>, </span><br><span class="line">    activeRule: <span class="string">'/micro-1'</span>, </span><br><span class="line">    props: &#123; <span class="attr">i18n</span>: <span class="keyword">this</span>.$i18n &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">]);</span><br><span class="line"><span class="comment">// 手动加载</span></span><br><span class="line">loadMicroApp(&#123;</span><br><span class="line">  name,</span><br><span class="line">  entry,</span><br><span class="line">  container: <span class="string">`#<span class="subst">$&#123;<span class="keyword">this</span>.boxId&#125;</span>`</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    i18n: <span class="keyword">this</span>.$i18n</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>子应用启动时获取props参数初始化<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; i18n &#125; = props;</span><br><span class="line"><span class="keyword">if</span> (!i18n) &#123;</span><br><span class="line">  <span class="comment">// 当独立运行时或主应用未共享时，动态加载本地国际化</span></span><br><span class="line">  <span class="keyword">const</span> <span class="built_in">module</span> = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">'@/common-module/lang'</span>);</span><br><span class="line">  i18n = <span class="built_in">module</span>.default;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  i18n,</span><br><span class="line">  router,</span><br><span class="line">  render</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>主应用在注册子应用或者手动加载子应用时把共享的变量通过<code>props</code>传递给子应用，子应用在<code>bootstrap</code>或者<code>mount</code>钩子函数中获取，如果没有从<code>props</code>中获取到该变量，子应用则动态加载本地变量。</p>
<h3 id="keep-alive（Vue）"><a href="#keep-alive（Vue）" class="headerlink" title="keep-alive（Vue）"></a>keep-alive（Vue）</h3><blockquote>
<p>其实并不建议做keepAlive，但是我还是做了，我能说什么…</p>
</blockquote>
<p>网上有其他方案，我没有采纳，我在这里说下我的方案吧（综合了网上的方案），使用<code>loadMicroApp</code>手动加载和卸载子应用。这里有几个难点：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// microApp.js (可以走CI/CD运维配置，也可以通过接口从服务器获取)</span></span><br><span class="line"><span class="keyword">const</span> apps = [&#123;</span><br><span class="line">  name: <span class="string">'micro-1'</span>,</span><br><span class="line">  activeRule: <span class="string">'/micro-1'</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  name: <span class="string">'micro-2'</span>,</span><br><span class="line">  activeRule: <span class="string">'/micro-2'</span>,</span><br><span class="line">  prefetch: <span class="literal">true</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  name: <span class="string">'micro-3'</span>,</span><br><span class="line">  activeRule: <span class="string">'/micro-3'</span>,</span><br><span class="line">  prefetch: <span class="literal">false</span>, <span class="comment">// 预加载资源</span></span><br><span class="line">  preload: <span class="literal">false</span>, <span class="comment">// 预渲染</span></span><br><span class="line">  keepalive: <span class="literal">true</span> <span class="comment">// 缓存子应用</span></span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> apps.map(<span class="function"><span class="params">app</span> =&gt;</span> (&#123; ...app, <span class="attr">entry</span>: getEntryUrl(app.name) &#125;));</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div</span><br><span class="line">    v-show=&quot;isActive&quot;</span><br><span class="line">    :id=&quot;boxId&quot;</span><br><span class="line">    :class=&quot;b()&quot;</span><br><span class="line">  /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; loadMicroApp &#125; from &apos;qiankun&apos;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;MicroApp&apos;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    app: &#123;</span><br><span class="line">      type: Object,</span><br><span class="line">      required: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  inject: [&apos;appLayout&apos;],</span><br><span class="line">  computed: &#123;</span><br><span class="line">    boxId() &#123;</span><br><span class="line">      return `micro-app_$&#123;this.app.name&#125;`;</span><br><span class="line">    &#125;,</span><br><span class="line">    activeRule() &#123;</span><br><span class="line">      return this.app.activeRule;</span><br><span class="line">    &#125;,</span><br><span class="line">    currentPath() &#123;</span><br><span class="line">      return this.$route.fullPath;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 判断当前子应用是否为激活状态</span><br><span class="line">    isActive() &#123;</span><br><span class="line">      const &#123;activeRule, currentPath&#125; = this;</span><br><span class="line">      const rules = Array.isArray(activeRule) ? [ ...activeRule ] : [activeRule];</span><br><span class="line">      return rules.some(rule =&gt; &#123;</span><br><span class="line">        if (typeof rule === &apos;function&apos;) &#123;</span><br><span class="line">          return rule(currentPath);</span><br><span class="line">        &#125;</span><br><span class="line">        return currentPath.startsWith(`$&#123;rule&#125;`);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    isKeepalive() &#123;</span><br><span class="line">      return this.app.keepalive;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    isActive: &#123;</span><br><span class="line">      handler() &#123;</span><br><span class="line">        this.onActiveChange();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created () &#123;</span><br><span class="line">    // 需要等spa start后再加载应用，才会有shadow节点</span><br><span class="line">    this.$once(&apos;started&apos;, () =&gt; &#123;</span><br><span class="line">      this.init();</span><br><span class="line">    &#125;);</span><br><span class="line">    // 把当前实例加入到layout中</span><br><span class="line">    this.appLayout.apps.set(this.app.name, this);</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    init() &#123;</span><br><span class="line">      // 预挂载</span><br><span class="line">      if (this.app.preload) &#123;</span><br><span class="line">        this.load();</span><br><span class="line">      &#125;</span><br><span class="line">      // 如果路由直接进入当前应用则会在这里挂载</span><br><span class="line">      this.onActiveChange();</span><br><span class="line">    &#125;,</span><br><span class="line">    /**</span><br><span class="line">     * 加载微应用</span><br><span class="line">     * @returns &#123;Promise&lt;void&gt;&#125;</span><br><span class="line">     */</span><br><span class="line">    async load() &#123;</span><br><span class="line">      if (!this.appInstance) &#123;</span><br><span class="line">        const &#123; name, entry, preload &#125; = this.app;</span><br><span class="line">        this.appInstance = loadMicroApp(&#123;</span><br><span class="line">          name,</span><br><span class="line">          entry,</span><br><span class="line">          container: `#$&#123;this.boxId&#125;`,</span><br><span class="line">          props: &#123;</span><br><span class="line">            ...,</span><br><span class="line">            appName: name,</span><br><span class="line">            preload,</span><br><span class="line">            active: this.isActive</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        await this.appInstance.mountPromise;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    /**</span><br><span class="line">     * 状态变更</span><br><span class="line">     * @returns &#123;Promise&lt;void&gt;&#125;</span><br><span class="line">     */</span><br><span class="line">    async onActiveChange() &#123;</span><br><span class="line">      // 触发全局事件</span><br><span class="line">      this.eventBus.$emit(`$&#123;this.isActive ? &apos;activated&apos; : &apos;deactivated&apos;&#125;:$&#123;this.app.name&#125;`);</span><br><span class="line">      // 如果当前为激活则加载</span><br><span class="line">      if (this.isActive) &#123;</span><br><span class="line">        await this.load();</span><br><span class="line">      &#125;</span><br><span class="line">      // 如果当前为失效并且当前应用已加载并且配置为不缓存则卸载当前应用</span><br><span class="line">      if (!this.isActive &amp;&amp; this.appInstance &amp;&amp; !this.isKeepalive) &#123;</span><br><span class="line">        await this.appInstance.unmount();</span><br><span class="line">        this.appInstance = null;</span><br><span class="line">      &#125;</span><br><span class="line">      // 通知布局当前状态变更</span><br><span class="line">      this.$emit(&apos;active&apos;, this.isActive);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// App.vue (layout)</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;template v-if=&quot;!isMicroApp&quot;&gt;</span><br><span class="line">    &lt;keep-alive&gt;</span><br><span class="line">      &lt;router-view v-if=&quot;keepAlive&quot; /&gt;</span><br><span class="line">    &lt;/keep-alive&gt;</span><br><span class="line">    &lt;router-view v-if=&quot;!keepAlive&quot; /&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">  &lt;micro-app</span><br><span class="line">    v-for=&quot;app of microApps&quot;</span><br><span class="line">    :key=&quot;app.name&quot;</span><br><span class="line">    :app=&quot;app&quot;</span><br><span class="line">    @active=&quot;onMicroActive&quot;</span><br><span class="line">  /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  computed: &#123;</span><br><span class="line">    isMicroApp() &#123;</span><br><span class="line">      return !!this.currentMicroApp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    // 启动qiankun主应用，开启多例与严格样式隔离沙箱（shadow dom）</span><br><span class="line">    start(&#123; singular: false, sandbox: &#123; strictStyleIsolation: true &#125; &#125;);</span><br><span class="line">    // 过滤出需要预加载的子应用进行资源预加载</span><br><span class="line">    const prefetchAppList = this.microApps.filter(item =&gt; item.prefetch);</span><br><span class="line">    if (prefetchAppList.length) &#123;</span><br><span class="line">      // 延迟执行，放置影响当前访问的应用资源加载</span><br><span class="line">      (window.requestIdleCallback || setTimeout)(() =&gt; prefetchApps(prefetchAppList));</span><br><span class="line">    &#125;</span><br><span class="line">    // 触发微应用的初始化事件，代表spa已经started了</span><br><span class="line">    this.appValues.forEach(app =&gt; app.$emit(&apos;started&apos;));</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    onMicroActive() &#123;</span><br><span class="line">      this.currentMicroApp = this.appValues.find(item =&gt; item.isActive);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<ol>
<li>路由的响应，如果我们不卸载keepAlive的子应用，则子应用依然会响应路由的变化，从而导致子应用的当前路由已经不是离开时的路由了。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 让vue-router支持keepalive，当主路由变更时如果当前子应用没有该路由则不做处理</span></span><br><span class="line"><span class="comment"> * 因为通过浏览器前进后退会先触发主路由的监听，导致没有及时通知到子应用deactivated，则子应用路由没有及时停止监听，则会处理本次主路由变更</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">router</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> supportKeepAlive = <span class="function">(<span class="params">router</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> old = router.history.transitionTo;</span><br><span class="line">  router.history.transitionTo = <span class="function">(<span class="params">location, cb</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> matched = router.getMatchedComponents(location);</span><br><span class="line">    <span class="keyword">if</span> (!matched || !matched.length) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Reflect</span>.apply(old, router.history, [location, cb]);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 重写监听路由变更事件</span></span><br><span class="line">supportKeepAlive(instance.$router);</span><br><span class="line"><span class="comment">// 如果为预挂载并且当前不为激活状态则停止监听路由，并设置_startLocation为空，为了在激活的时候可以响应</span></span><br><span class="line"><span class="keyword">if</span> (preload &amp;&amp; !active) &#123;</span><br><span class="line">  <span class="comment">// 如果当前子应用不是预加载（我这里做了多个子应用并存且可以预加载），并且访问的不是当前子应用则把路由停止</span></span><br><span class="line">  instance.$router.history.teardown();</span><br><span class="line">  instance.$router.history._startLocation = <span class="string">''</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>页面的<code>activated</code>与<code>deactivated</code>触发。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在子应用创建的时候监听激活与失效事件</span></span><br><span class="line"><span class="keyword">if</span> (eventBus) &#123;</span><br><span class="line">  eventBus.$on(<span class="string">`activated:<span class="subst">$&#123;appName&#125;</span>`</span>, activated);</span><br><span class="line">  eventBus.$on(<span class="string">`deactivated:<span class="subst">$&#123;appName&#125;</span>`</span>, deactivated);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取当前路由的组件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;*&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> getCurrentRouteInstance = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;matched&#125; = instance?.$route || &#123;&#125;;</span><br><span class="line">  <span class="keyword">if</span> (matched?.length) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; instances &#125; = matched[matched.length - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> (instances) &#123;</span><br><span class="line">      <span class="keyword">return</span> instances.default || instances;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 触发当前路由组件hook</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">hook</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> fireCurrentRouterInstanceHook = <span class="function">(<span class="params">hook</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> com = getCurrentRouteInstance();</span><br><span class="line">  <span class="keyword">const</span> fns = com?.$options?.[hook];</span><br><span class="line">  <span class="keyword">if</span> (fns) &#123;</span><br><span class="line">    fns.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> <span class="built_in">Reflect</span>.apply(fn, com, [&#123; <span class="attr">micro</span>: <span class="literal">true</span> &#125;]));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 激活当前子应用回调</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> activated = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  instance?.$router.history.setupListeners();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'setupListeners'</span>);</span><br><span class="line">  fireCurrentRouterInstanceHook(<span class="string">'activated'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 被 keep-alive 缓存的组件停用时调用。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> deactivated = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  instance?.$router.history.teardown();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'teardown'</span>);</span><br><span class="line">  fireCurrentRouterInstanceHook(<span class="string">'deactivated'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="vuex-全局状态共享（慎用，破坏了vuex的理念-不适用与大量的数据）"><a href="#vuex-全局状态共享（慎用，破坏了vuex的理念-不适用与大量的数据）" class="headerlink" title="vuex 全局状态共享（慎用，破坏了vuex的理念, 不适用与大量的数据）"></a>vuex 全局状态共享（慎用，破坏了vuex的理念, 不适用与大量的数据）</h3><blockquote>
<p>子应用使用自己的vuex。并不是真正的使用主应用的vuex。需要恭喜的vuex模块主应用与子应用理论来说是引用的相同的文件，我们在这个vuex模块标记它是否需要共享<br>并watch主应用与子应用的该模块。当子应用中的state发生了改变则更新主应用的state，相反主应用的state变更后也同样修改子应用的state。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取命名空间状态数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>state 状态数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>namespace 命名空间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;*&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> getNamespaceState = <span class="function">(<span class="params">state, namespace</span>) =&gt;</span> namespace === <span class="string">'root'</span> ? state : <span class="keyword">get</span>(state, namespace);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 更新状态数据</span><br><span class="line"> * @param store 状态存储</span><br><span class="line"> * @param namespace 命名空间</span><br><span class="line"> * @param value 新的值</span><br><span class="line"> * @returns &#123;*&#125;</span><br><span class="line"> *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">const updateStoreState = (store, namespace, value) =&gt; store._withCommit(() =&gt; setVo(getNamespaceState(store.state, namespace), value));</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span>**</span><br><span class="line"> * 监听状态存储</span><br><span class="line"> * @param store 状态存储</span><br><span class="line"> * @param fn 变更事件函数</span><br><span class="line"> * @param namespace 命名空间</span><br><span class="line"> * @returns &#123;*&#125;</span><br><span class="line"> * @private</span><br><span class="line"> *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">const _watch = (store, fn, namespace) =&gt; store.watch(state =&gt; getNamespaceState(state, namespace), fn, &#123; deep: true &#125;);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const updateSubStoreState = (stores, ns, value) =&gt; stores.filter(s =&gt; s.__shareNamespaces.has(ns)).forEach(s =&gt; updateStoreState(s, ns, value));</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default (store, mainStore) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ 如果有主应用存储则开启共享</span></span><br><span class="line"><span class="regexp">  if (mainStore) &#123;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 多个子应用与主应用共享时判断主应用存储是否已经标记为已共享</span></span><br><span class="line"><span class="regexp">    if (mainStore.__isShare !== true) &#123;</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ 所有子应用状态</span></span><br><span class="line"><span class="regexp">      mainStore.__subStores = new Set();</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ 已监听的命名空间</span></span><br><span class="line"><span class="regexp">      mainStore.__subWatchs = new Map();</span></span><br><span class="line"><span class="regexp">      mainStore.__isShare = true;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 把当前子应用存储放入主应用里面</span></span><br><span class="line"><span class="regexp">    mainStore.__subStores.add(store);</span></span><br><span class="line"><span class="regexp">    const shareNames = new Set();</span></span><br><span class="line"><span class="regexp">    const &#123; _modulesNamespaceMap: moduleMap &#125; = store;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 监听当前store，更新主应用store，并统计该子应用需要共享的所有命名空间</span></span><br><span class="line"><span class="regexp">    Object.keys(moduleMap).forEach(key =&gt; &#123;</span></span><br><span class="line"><span class="regexp">      const names = key.split('/</span><span class="string">').filter(k =&gt; !!k);</span></span><br><span class="line"><span class="string">      // 如果该命名空间的上级命名空间已经共享则下级不需要再共享</span></span><br><span class="line"><span class="string">      const has = names.some(name =&gt; shareNames.has(name));</span></span><br><span class="line"><span class="string">      if (has) &#123;</span></span><br><span class="line"><span class="string">        return;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">      const &#123; _rawModule: &#123; share &#125; &#125; = moduleMap[key];</span></span><br><span class="line"><span class="string">      if (share === true) &#123;</span></span><br><span class="line"><span class="string">        const namespace = names.join('</span>.<span class="string">');</span></span><br><span class="line"><span class="string">        // 监听当前子应用存储的命名空间，发生变化后更新主应用与之同名的命名空间数据</span></span><br><span class="line"><span class="string">        _watch(store, value =&gt; updateStoreState(mainStore, namespace, value), namespace);</span></span><br><span class="line"><span class="string">        shareNames.add(namespace);</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // 存储当前子应用需要共享的命名空间</span></span><br><span class="line"><span class="string">    store.__shareNamespaces = shareNames;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    shareNames.forEach(ns =&gt; &#123;</span></span><br><span class="line"><span class="string">      // 从主应用同步数据</span></span><br><span class="line"><span class="string">      updateStoreState(store, ns, getNamespaceState(mainStore.state, ns));</span></span><br><span class="line"><span class="string">      if (mainStore.__subWatchs.has(ns)) &#123;</span></span><br><span class="line"><span class="string">        return;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">      // 监听主应用的状态，更新子应用存储</span></span><br><span class="line"><span class="string">      const w = mainStore.watch(state =&gt; getNamespaceState(state, ns), value =&gt; updateSubStoreState([...mainStore.__subStores], ns, value), &#123; deep: true &#125;);</span></span><br><span class="line"><span class="string">      console.log(`主应用store监听模块【$&#123;ns&#125;】数据`);</span></span><br><span class="line"><span class="string">      mainStore.__subWatchs.set(ns, w);</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  return store;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>微前端</category>
      </categories>
      <tags>
        <tag>single spa</tag>
        <tag>qiankun</tag>
        <tag>微前端</tag>
        <tag>乾坤</tag>
      </tags>
  </entry>
</search>
